// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: contract_out.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_contract_5fout_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_contract_5fout_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_contract_5fout_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_contract_5fout_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_contract_5fout_2eproto;
namespace contract_out {
class ContractOut;
class ContractOutDefaultTypeInternal;
extern ContractOutDefaultTypeInternal _ContractOut_default_instance_;
class ContractOut_Area;
class ContractOut_AreaDefaultTypeInternal;
extern ContractOut_AreaDefaultTypeInternal _ContractOut_Area_default_instance_;
class ContractOut_Location;
class ContractOut_LocationDefaultTypeInternal;
extern ContractOut_LocationDefaultTypeInternal _ContractOut_Location_default_instance_;
class ContractOut_Route;
class ContractOut_RouteDefaultTypeInternal;
extern ContractOut_RouteDefaultTypeInternal _ContractOut_Route_default_instance_;
class ContractOut_UpdateArea;
class ContractOut_UpdateAreaDefaultTypeInternal;
extern ContractOut_UpdateAreaDefaultTypeInternal _ContractOut_UpdateArea_default_instance_;
class ContractOut_UpdateRoutingTable;
class ContractOut_UpdateRoutingTableDefaultTypeInternal;
extern ContractOut_UpdateRoutingTableDefaultTypeInternal _ContractOut_UpdateRoutingTable_default_instance_;
class ContractOut_UpdateUser;
class ContractOut_UpdateUserDefaultTypeInternal;
extern ContractOut_UpdateUserDefaultTypeInternal _ContractOut_UpdateUser_default_instance_;
}  // namespace contract_out
PROTOBUF_NAMESPACE_OPEN
template<> ::contract_out::ContractOut* Arena::CreateMaybeMessage<::contract_out::ContractOut>(Arena*);
template<> ::contract_out::ContractOut_Area* Arena::CreateMaybeMessage<::contract_out::ContractOut_Area>(Arena*);
template<> ::contract_out::ContractOut_Location* Arena::CreateMaybeMessage<::contract_out::ContractOut_Location>(Arena*);
template<> ::contract_out::ContractOut_Route* Arena::CreateMaybeMessage<::contract_out::ContractOut_Route>(Arena*);
template<> ::contract_out::ContractOut_UpdateArea* Arena::CreateMaybeMessage<::contract_out::ContractOut_UpdateArea>(Arena*);
template<> ::contract_out::ContractOut_UpdateRoutingTable* Arena::CreateMaybeMessage<::contract_out::ContractOut_UpdateRoutingTable>(Arena*);
template<> ::contract_out::ContractOut_UpdateUser* Arena::CreateMaybeMessage<::contract_out::ContractOut_UpdateUser>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace contract_out {

enum ContractOut_Action : int {
  ContractOut_Action_ADD = 1,
  ContractOut_Action_DELETE = 2,
  ContractOut_Action_UPDATE = 3
};
bool ContractOut_Action_IsValid(int value);
constexpr ContractOut_Action ContractOut_Action_Action_MIN = ContractOut_Action_ADD;
constexpr ContractOut_Action ContractOut_Action_Action_MAX = ContractOut_Action_UPDATE;
constexpr int ContractOut_Action_Action_ARRAYSIZE = ContractOut_Action_Action_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ContractOut_Action_descriptor();
template<typename T>
inline const std::string& ContractOut_Action_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ContractOut_Action>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ContractOut_Action_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ContractOut_Action_descriptor(), enum_t_value);
}
inline bool ContractOut_Action_Parse(
    const std::string& name, ContractOut_Action* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ContractOut_Action>(
    ContractOut_Action_descriptor(), name, value);
}
enum ContractOut_Event : int {
  ContractOut_Event_FORCED = 1,
  ContractOut_Event_REQUIRED = 2
};
bool ContractOut_Event_IsValid(int value);
constexpr ContractOut_Event ContractOut_Event_Event_MIN = ContractOut_Event_FORCED;
constexpr ContractOut_Event ContractOut_Event_Event_MAX = ContractOut_Event_REQUIRED;
constexpr int ContractOut_Event_Event_ARRAYSIZE = ContractOut_Event_Event_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ContractOut_Event_descriptor();
template<typename T>
inline const std::string& ContractOut_Event_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ContractOut_Event>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ContractOut_Event_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ContractOut_Event_descriptor(), enum_t_value);
}
inline bool ContractOut_Event_Parse(
    const std::string& name, ContractOut_Event* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ContractOut_Event>(
    ContractOut_Event_descriptor(), name, value);
}
// ===================================================================

class ContractOut_Route :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:contract_out.ContractOut.Route) */ {
 public:
  ContractOut_Route();
  virtual ~ContractOut_Route();

  ContractOut_Route(const ContractOut_Route& from);
  ContractOut_Route(ContractOut_Route&& from) noexcept
    : ContractOut_Route() {
    *this = ::std::move(from);
  }

  inline ContractOut_Route& operator=(const ContractOut_Route& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContractOut_Route& operator=(ContractOut_Route&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ContractOut_Route& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ContractOut_Route* internal_default_instance() {
    return reinterpret_cast<const ContractOut_Route*>(
               &_ContractOut_Route_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ContractOut_Route& a, ContractOut_Route& b) {
    a.Swap(&b);
  }
  inline void Swap(ContractOut_Route* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ContractOut_Route* New() const final {
    return CreateMaybeMessage<ContractOut_Route>(nullptr);
  }

  ContractOut_Route* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ContractOut_Route>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ContractOut_Route& from);
  void MergeFrom(const ContractOut_Route& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContractOut_Route* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "contract_out.ContractOut.Route";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_contract_5fout_2eproto);
    return ::descriptor_table_contract_5fout_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDestinationFieldNumber = 1,
    kNextHopFieldNumber = 2,
    kDropFieldNumber = 3,
  };
  // optional int32 destination = 1;
  bool has_destination() const;
  private:
  bool _internal_has_destination() const;
  public:
  void clear_destination();
  ::PROTOBUF_NAMESPACE_ID::int32 destination() const;
  void set_destination(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_destination() const;
  void _internal_set_destination(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 nextHop = 2;
  bool has_nexthop() const;
  private:
  bool _internal_has_nexthop() const;
  public:
  void clear_nexthop();
  ::PROTOBUF_NAMESPACE_ID::int32 nexthop() const;
  void set_nexthop(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_nexthop() const;
  void _internal_set_nexthop(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional bool drop = 3;
  bool has_drop() const;
  private:
  bool _internal_has_drop() const;
  public:
  void clear_drop();
  bool drop() const;
  void set_drop(bool value);
  private:
  bool _internal_drop() const;
  void _internal_set_drop(bool value);
  public:

  // @@protoc_insertion_point(class_scope:contract_out.ContractOut.Route)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 destination_;
  ::PROTOBUF_NAMESPACE_ID::int32 nexthop_;
  bool drop_;
  friend struct ::TableStruct_contract_5fout_2eproto;
};
// -------------------------------------------------------------------

class ContractOut_Location :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:contract_out.ContractOut.Location) */ {
 public:
  ContractOut_Location();
  virtual ~ContractOut_Location();

  ContractOut_Location(const ContractOut_Location& from);
  ContractOut_Location(ContractOut_Location&& from) noexcept
    : ContractOut_Location() {
    *this = ::std::move(from);
  }

  inline ContractOut_Location& operator=(const ContractOut_Location& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContractOut_Location& operator=(ContractOut_Location&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ContractOut_Location& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ContractOut_Location* internal_default_instance() {
    return reinterpret_cast<const ContractOut_Location*>(
               &_ContractOut_Location_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ContractOut_Location& a, ContractOut_Location& b) {
    a.Swap(&b);
  }
  inline void Swap(ContractOut_Location* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ContractOut_Location* New() const final {
    return CreateMaybeMessage<ContractOut_Location>(nullptr);
  }

  ContractOut_Location* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ContractOut_Location>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ContractOut_Location& from);
  void MergeFrom(const ContractOut_Location& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContractOut_Location* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "contract_out.ContractOut.Location";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_contract_5fout_2eproto);
    return ::descriptor_table_contract_5fout_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // optional string x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  const std::string& x() const;
  void set_x(const std::string& value);
  void set_x(std::string&& value);
  void set_x(const char* value);
  void set_x(const char* value, size_t size);
  std::string* mutable_x();
  std::string* release_x();
  void set_allocated_x(std::string* x);
  private:
  const std::string& _internal_x() const;
  void _internal_set_x(const std::string& value);
  std::string* _internal_mutable_x();
  public:

  // optional string y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  const std::string& y() const;
  void set_y(const std::string& value);
  void set_y(std::string&& value);
  void set_y(const char* value);
  void set_y(const char* value, size_t size);
  std::string* mutable_y();
  std::string* release_y();
  void set_allocated_y(std::string* y);
  private:
  const std::string& _internal_y() const;
  void _internal_set_y(const std::string& value);
  std::string* _internal_mutable_y();
  public:

  // @@protoc_insertion_point(class_scope:contract_out.ContractOut.Location)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr x_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr y_;
  friend struct ::TableStruct_contract_5fout_2eproto;
};
// -------------------------------------------------------------------

class ContractOut_Area :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:contract_out.ContractOut.Area) */ {
 public:
  ContractOut_Area();
  virtual ~ContractOut_Area();

  ContractOut_Area(const ContractOut_Area& from);
  ContractOut_Area(ContractOut_Area&& from) noexcept
    : ContractOut_Area() {
    *this = ::std::move(from);
  }

  inline ContractOut_Area& operator=(const ContractOut_Area& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContractOut_Area& operator=(ContractOut_Area&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ContractOut_Area& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ContractOut_Area* internal_default_instance() {
    return reinterpret_cast<const ContractOut_Area*>(
               &_ContractOut_Area_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ContractOut_Area& a, ContractOut_Area& b) {
    a.Swap(&b);
  }
  inline void Swap(ContractOut_Area* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ContractOut_Area* New() const final {
    return CreateMaybeMessage<ContractOut_Area>(nullptr);
  }

  ContractOut_Area* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ContractOut_Area>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ContractOut_Area& from);
  void MergeFrom(const ContractOut_Area& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContractOut_Area* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "contract_out.ContractOut.Area";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_contract_5fout_2eproto);
    return ::descriptor_table_contract_5fout_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRadiusFieldNumber = 2,
    kCenterFieldNumber = 1,
  };
  // optional string radius = 2;
  bool has_radius() const;
  private:
  bool _internal_has_radius() const;
  public:
  void clear_radius();
  const std::string& radius() const;
  void set_radius(const std::string& value);
  void set_radius(std::string&& value);
  void set_radius(const char* value);
  void set_radius(const char* value, size_t size);
  std::string* mutable_radius();
  std::string* release_radius();
  void set_allocated_radius(std::string* radius);
  private:
  const std::string& _internal_radius() const;
  void _internal_set_radius(const std::string& value);
  std::string* _internal_mutable_radius();
  public:

  // optional .contract_out.ContractOut.Location center = 1;
  bool has_center() const;
  private:
  bool _internal_has_center() const;
  public:
  void clear_center();
  const ::contract_out::ContractOut_Location& center() const;
  ::contract_out::ContractOut_Location* release_center();
  ::contract_out::ContractOut_Location* mutable_center();
  void set_allocated_center(::contract_out::ContractOut_Location* center);
  private:
  const ::contract_out::ContractOut_Location& _internal_center() const;
  ::contract_out::ContractOut_Location* _internal_mutable_center();
  public:

  // @@protoc_insertion_point(class_scope:contract_out.ContractOut.Area)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr radius_;
  ::contract_out::ContractOut_Location* center_;
  friend struct ::TableStruct_contract_5fout_2eproto;
};
// -------------------------------------------------------------------

class ContractOut_UpdateUser :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:contract_out.ContractOut.UpdateUser) */ {
 public:
  ContractOut_UpdateUser();
  virtual ~ContractOut_UpdateUser();

  ContractOut_UpdateUser(const ContractOut_UpdateUser& from);
  ContractOut_UpdateUser(ContractOut_UpdateUser&& from) noexcept
    : ContractOut_UpdateUser() {
    *this = ::std::move(from);
  }

  inline ContractOut_UpdateUser& operator=(const ContractOut_UpdateUser& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContractOut_UpdateUser& operator=(ContractOut_UpdateUser&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ContractOut_UpdateUser& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ContractOut_UpdateUser* internal_default_instance() {
    return reinterpret_cast<const ContractOut_UpdateUser*>(
               &_ContractOut_UpdateUser_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ContractOut_UpdateUser& a, ContractOut_UpdateUser& b) {
    a.Swap(&b);
  }
  inline void Swap(ContractOut_UpdateUser* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ContractOut_UpdateUser* New() const final {
    return CreateMaybeMessage<ContractOut_UpdateUser>(nullptr);
  }

  ContractOut_UpdateUser* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ContractOut_UpdateUser>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ContractOut_UpdateUser& from);
  void MergeFrom(const ContractOut_UpdateUser& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContractOut_UpdateUser* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "contract_out.ContractOut.UpdateUser";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_contract_5fout_2eproto);
    return ::descriptor_table_contract_5fout_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRelayIdFieldNumber = 1,
    kUserIdFieldNumber = 2,
    kActionFieldNumber = 3,
    kEventFieldNumber = 4,
  };
  // optional int32 relayId = 1;
  bool has_relayid() const;
  private:
  bool _internal_has_relayid() const;
  public:
  void clear_relayid();
  ::PROTOBUF_NAMESPACE_ID::int32 relayid() const;
  void set_relayid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_relayid() const;
  void _internal_set_relayid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 userId = 2;
  bool has_userid() const;
  private:
  bool _internal_has_userid() const;
  public:
  void clear_userid();
  ::PROTOBUF_NAMESPACE_ID::int32 userid() const;
  void set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_userid() const;
  void _internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .contract_out.ContractOut.Action action = 3;
  bool has_action() const;
  private:
  bool _internal_has_action() const;
  public:
  void clear_action();
  ::contract_out::ContractOut_Action action() const;
  void set_action(::contract_out::ContractOut_Action value);
  private:
  ::contract_out::ContractOut_Action _internal_action() const;
  void _internal_set_action(::contract_out::ContractOut_Action value);
  public:

  // optional .contract_out.ContractOut.Event event = 4;
  bool has_event() const;
  private:
  bool _internal_has_event() const;
  public:
  void clear_event();
  ::contract_out::ContractOut_Event event() const;
  void set_event(::contract_out::ContractOut_Event value);
  private:
  ::contract_out::ContractOut_Event _internal_event() const;
  void _internal_set_event(::contract_out::ContractOut_Event value);
  public:

  // @@protoc_insertion_point(class_scope:contract_out.ContractOut.UpdateUser)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 relayid_;
  ::PROTOBUF_NAMESPACE_ID::int32 userid_;
  int action_;
  int event_;
  friend struct ::TableStruct_contract_5fout_2eproto;
};
// -------------------------------------------------------------------

class ContractOut_UpdateRoutingTable :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:contract_out.ContractOut.UpdateRoutingTable) */ {
 public:
  ContractOut_UpdateRoutingTable();
  virtual ~ContractOut_UpdateRoutingTable();

  ContractOut_UpdateRoutingTable(const ContractOut_UpdateRoutingTable& from);
  ContractOut_UpdateRoutingTable(ContractOut_UpdateRoutingTable&& from) noexcept
    : ContractOut_UpdateRoutingTable() {
    *this = ::std::move(from);
  }

  inline ContractOut_UpdateRoutingTable& operator=(const ContractOut_UpdateRoutingTable& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContractOut_UpdateRoutingTable& operator=(ContractOut_UpdateRoutingTable&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ContractOut_UpdateRoutingTable& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ContractOut_UpdateRoutingTable* internal_default_instance() {
    return reinterpret_cast<const ContractOut_UpdateRoutingTable*>(
               &_ContractOut_UpdateRoutingTable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ContractOut_UpdateRoutingTable& a, ContractOut_UpdateRoutingTable& b) {
    a.Swap(&b);
  }
  inline void Swap(ContractOut_UpdateRoutingTable* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ContractOut_UpdateRoutingTable* New() const final {
    return CreateMaybeMessage<ContractOut_UpdateRoutingTable>(nullptr);
  }

  ContractOut_UpdateRoutingTable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ContractOut_UpdateRoutingTable>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ContractOut_UpdateRoutingTable& from);
  void MergeFrom(const ContractOut_UpdateRoutingTable& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContractOut_UpdateRoutingTable* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "contract_out.ContractOut.UpdateRoutingTable";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_contract_5fout_2eproto);
    return ::descriptor_table_contract_5fout_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRouteFieldNumber = 2,
    kRelayIdFieldNumber = 1,
    kActionFieldNumber = 3,
  };
  // optional .contract_out.ContractOut.Route route = 2;
  bool has_route() const;
  private:
  bool _internal_has_route() const;
  public:
  void clear_route();
  const ::contract_out::ContractOut_Route& route() const;
  ::contract_out::ContractOut_Route* release_route();
  ::contract_out::ContractOut_Route* mutable_route();
  void set_allocated_route(::contract_out::ContractOut_Route* route);
  private:
  const ::contract_out::ContractOut_Route& _internal_route() const;
  ::contract_out::ContractOut_Route* _internal_mutable_route();
  public:

  // optional int32 relayId = 1;
  bool has_relayid() const;
  private:
  bool _internal_has_relayid() const;
  public:
  void clear_relayid();
  ::PROTOBUF_NAMESPACE_ID::int32 relayid() const;
  void set_relayid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_relayid() const;
  void _internal_set_relayid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional .contract_out.ContractOut.Action action = 3;
  bool has_action() const;
  private:
  bool _internal_has_action() const;
  public:
  void clear_action();
  ::contract_out::ContractOut_Action action() const;
  void set_action(::contract_out::ContractOut_Action value);
  private:
  ::contract_out::ContractOut_Action _internal_action() const;
  void _internal_set_action(::contract_out::ContractOut_Action value);
  public:

  // @@protoc_insertion_point(class_scope:contract_out.ContractOut.UpdateRoutingTable)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::contract_out::ContractOut_Route* route_;
  ::PROTOBUF_NAMESPACE_ID::int32 relayid_;
  int action_;
  friend struct ::TableStruct_contract_5fout_2eproto;
};
// -------------------------------------------------------------------

class ContractOut_UpdateArea :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:contract_out.ContractOut.UpdateArea) */ {
 public:
  ContractOut_UpdateArea();
  virtual ~ContractOut_UpdateArea();

  ContractOut_UpdateArea(const ContractOut_UpdateArea& from);
  ContractOut_UpdateArea(ContractOut_UpdateArea&& from) noexcept
    : ContractOut_UpdateArea() {
    *this = ::std::move(from);
  }

  inline ContractOut_UpdateArea& operator=(const ContractOut_UpdateArea& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContractOut_UpdateArea& operator=(ContractOut_UpdateArea&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ContractOut_UpdateArea& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ContractOut_UpdateArea* internal_default_instance() {
    return reinterpret_cast<const ContractOut_UpdateArea*>(
               &_ContractOut_UpdateArea_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ContractOut_UpdateArea& a, ContractOut_UpdateArea& b) {
    a.Swap(&b);
  }
  inline void Swap(ContractOut_UpdateArea* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ContractOut_UpdateArea* New() const final {
    return CreateMaybeMessage<ContractOut_UpdateArea>(nullptr);
  }

  ContractOut_UpdateArea* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ContractOut_UpdateArea>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ContractOut_UpdateArea& from);
  void MergeFrom(const ContractOut_UpdateArea& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContractOut_UpdateArea* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "contract_out.ContractOut.UpdateArea";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_contract_5fout_2eproto);
    return ::descriptor_table_contract_5fout_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAreaFieldNumber = 2,
    kRelayIdFieldNumber = 1,
  };
  // optional .contract_out.ContractOut.Area area = 2;
  bool has_area() const;
  private:
  bool _internal_has_area() const;
  public:
  void clear_area();
  const ::contract_out::ContractOut_Area& area() const;
  ::contract_out::ContractOut_Area* release_area();
  ::contract_out::ContractOut_Area* mutable_area();
  void set_allocated_area(::contract_out::ContractOut_Area* area);
  private:
  const ::contract_out::ContractOut_Area& _internal_area() const;
  ::contract_out::ContractOut_Area* _internal_mutable_area();
  public:

  // optional int32 relayId = 1;
  bool has_relayid() const;
  private:
  bool _internal_has_relayid() const;
  public:
  void clear_relayid();
  ::PROTOBUF_NAMESPACE_ID::int32 relayid() const;
  void set_relayid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_relayid() const;
  void _internal_set_relayid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:contract_out.ContractOut.UpdateArea)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::contract_out::ContractOut_Area* area_;
  ::PROTOBUF_NAMESPACE_ID::int32 relayid_;
  friend struct ::TableStruct_contract_5fout_2eproto;
};
// -------------------------------------------------------------------

class ContractOut :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:contract_out.ContractOut) */ {
 public:
  ContractOut();
  virtual ~ContractOut();

  ContractOut(const ContractOut& from);
  ContractOut(ContractOut&& from) noexcept
    : ContractOut() {
    *this = ::std::move(from);
  }

  inline ContractOut& operator=(const ContractOut& from) {
    CopyFrom(from);
    return *this;
  }
  inline ContractOut& operator=(ContractOut&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ContractOut& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ContractOut* internal_default_instance() {
    return reinterpret_cast<const ContractOut*>(
               &_ContractOut_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ContractOut& a, ContractOut& b) {
    a.Swap(&b);
  }
  inline void Swap(ContractOut* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ContractOut* New() const final {
    return CreateMaybeMessage<ContractOut>(nullptr);
  }

  ContractOut* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ContractOut>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ContractOut& from);
  void MergeFrom(const ContractOut& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ContractOut* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "contract_out.ContractOut";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_contract_5fout_2eproto);
    return ::descriptor_table_contract_5fout_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ContractOut_Route Route;
  typedef ContractOut_Location Location;
  typedef ContractOut_Area Area;
  typedef ContractOut_UpdateUser UpdateUser;
  typedef ContractOut_UpdateRoutingTable UpdateRoutingTable;
  typedef ContractOut_UpdateArea UpdateArea;

  typedef ContractOut_Action Action;
  static constexpr Action ADD =
    ContractOut_Action_ADD;
  static constexpr Action DELETE =
    ContractOut_Action_DELETE;
  static constexpr Action UPDATE =
    ContractOut_Action_UPDATE;
  static inline bool Action_IsValid(int value) {
    return ContractOut_Action_IsValid(value);
  }
  static constexpr Action Action_MIN =
    ContractOut_Action_Action_MIN;
  static constexpr Action Action_MAX =
    ContractOut_Action_Action_MAX;
  static constexpr int Action_ARRAYSIZE =
    ContractOut_Action_Action_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Action_descriptor() {
    return ContractOut_Action_descriptor();
  }
  template<typename T>
  static inline const std::string& Action_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Action>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Action_Name.");
    return ContractOut_Action_Name(enum_t_value);
  }
  static inline bool Action_Parse(const std::string& name,
      Action* value) {
    return ContractOut_Action_Parse(name, value);
  }

  typedef ContractOut_Event Event;
  static constexpr Event FORCED =
    ContractOut_Event_FORCED;
  static constexpr Event REQUIRED =
    ContractOut_Event_REQUIRED;
  static inline bool Event_IsValid(int value) {
    return ContractOut_Event_IsValid(value);
  }
  static constexpr Event Event_MIN =
    ContractOut_Event_Event_MIN;
  static constexpr Event Event_MAX =
    ContractOut_Event_Event_MAX;
  static constexpr int Event_ARRAYSIZE =
    ContractOut_Event_Event_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Event_descriptor() {
    return ContractOut_Event_descriptor();
  }
  template<typename T>
  static inline const std::string& Event_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Event>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Event_Name.");
    return ContractOut_Event_Name(enum_t_value);
  }
  static inline bool Event_Parse(const std::string& name,
      Event* value) {
    return ContractOut_Event_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kUpdateUserFieldNumber = 2,
    kUpdateRoutingTableFieldNumber = 3,
    kUpdateAreaFieldNumber = 4,
    kIsACKFieldNumber = 1,
  };
  // repeated .contract_out.ContractOut.UpdateUser updateUser = 2;
  int updateuser_size() const;
  private:
  int _internal_updateuser_size() const;
  public:
  void clear_updateuser();
  ::contract_out::ContractOut_UpdateUser* mutable_updateuser(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::contract_out::ContractOut_UpdateUser >*
      mutable_updateuser();
  private:
  const ::contract_out::ContractOut_UpdateUser& _internal_updateuser(int index) const;
  ::contract_out::ContractOut_UpdateUser* _internal_add_updateuser();
  public:
  const ::contract_out::ContractOut_UpdateUser& updateuser(int index) const;
  ::contract_out::ContractOut_UpdateUser* add_updateuser();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::contract_out::ContractOut_UpdateUser >&
      updateuser() const;

  // repeated .contract_out.ContractOut.UpdateRoutingTable updateRoutingTable = 3;
  int updateroutingtable_size() const;
  private:
  int _internal_updateroutingtable_size() const;
  public:
  void clear_updateroutingtable();
  ::contract_out::ContractOut_UpdateRoutingTable* mutable_updateroutingtable(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::contract_out::ContractOut_UpdateRoutingTable >*
      mutable_updateroutingtable();
  private:
  const ::contract_out::ContractOut_UpdateRoutingTable& _internal_updateroutingtable(int index) const;
  ::contract_out::ContractOut_UpdateRoutingTable* _internal_add_updateroutingtable();
  public:
  const ::contract_out::ContractOut_UpdateRoutingTable& updateroutingtable(int index) const;
  ::contract_out::ContractOut_UpdateRoutingTable* add_updateroutingtable();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::contract_out::ContractOut_UpdateRoutingTable >&
      updateroutingtable() const;

  // repeated .contract_out.ContractOut.UpdateArea updateArea = 4;
  int updatearea_size() const;
  private:
  int _internal_updatearea_size() const;
  public:
  void clear_updatearea();
  ::contract_out::ContractOut_UpdateArea* mutable_updatearea(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::contract_out::ContractOut_UpdateArea >*
      mutable_updatearea();
  private:
  const ::contract_out::ContractOut_UpdateArea& _internal_updatearea(int index) const;
  ::contract_out::ContractOut_UpdateArea* _internal_add_updatearea();
  public:
  const ::contract_out::ContractOut_UpdateArea& updatearea(int index) const;
  ::contract_out::ContractOut_UpdateArea* add_updatearea();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::contract_out::ContractOut_UpdateArea >&
      updatearea() const;

  // required bool isACK = 1;
  bool has_isack() const;
  private:
  bool _internal_has_isack() const;
  public:
  void clear_isack();
  bool isack() const;
  void set_isack(bool value);
  private:
  bool _internal_isack() const;
  void _internal_set_isack(bool value);
  public:

  // @@protoc_insertion_point(class_scope:contract_out.ContractOut)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::contract_out::ContractOut_UpdateUser > updateuser_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::contract_out::ContractOut_UpdateRoutingTable > updateroutingtable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::contract_out::ContractOut_UpdateArea > updatearea_;
  bool isack_;
  friend struct ::TableStruct_contract_5fout_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ContractOut_Route

// optional int32 destination = 1;
inline bool ContractOut_Route::_internal_has_destination() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ContractOut_Route::has_destination() const {
  return _internal_has_destination();
}
inline void ContractOut_Route::clear_destination() {
  destination_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ContractOut_Route::_internal_destination() const {
  return destination_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ContractOut_Route::destination() const {
  // @@protoc_insertion_point(field_get:contract_out.ContractOut.Route.destination)
  return _internal_destination();
}
inline void ContractOut_Route::_internal_set_destination(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  destination_ = value;
}
inline void ContractOut_Route::set_destination(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_destination(value);
  // @@protoc_insertion_point(field_set:contract_out.ContractOut.Route.destination)
}

// optional int32 nextHop = 2;
inline bool ContractOut_Route::_internal_has_nexthop() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ContractOut_Route::has_nexthop() const {
  return _internal_has_nexthop();
}
inline void ContractOut_Route::clear_nexthop() {
  nexthop_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ContractOut_Route::_internal_nexthop() const {
  return nexthop_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ContractOut_Route::nexthop() const {
  // @@protoc_insertion_point(field_get:contract_out.ContractOut.Route.nextHop)
  return _internal_nexthop();
}
inline void ContractOut_Route::_internal_set_nexthop(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  nexthop_ = value;
}
inline void ContractOut_Route::set_nexthop(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_nexthop(value);
  // @@protoc_insertion_point(field_set:contract_out.ContractOut.Route.nextHop)
}

// optional bool drop = 3;
inline bool ContractOut_Route::_internal_has_drop() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ContractOut_Route::has_drop() const {
  return _internal_has_drop();
}
inline void ContractOut_Route::clear_drop() {
  drop_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool ContractOut_Route::_internal_drop() const {
  return drop_;
}
inline bool ContractOut_Route::drop() const {
  // @@protoc_insertion_point(field_get:contract_out.ContractOut.Route.drop)
  return _internal_drop();
}
inline void ContractOut_Route::_internal_set_drop(bool value) {
  _has_bits_[0] |= 0x00000004u;
  drop_ = value;
}
inline void ContractOut_Route::set_drop(bool value) {
  _internal_set_drop(value);
  // @@protoc_insertion_point(field_set:contract_out.ContractOut.Route.drop)
}

// -------------------------------------------------------------------

// ContractOut_Location

// optional string x = 1;
inline bool ContractOut_Location::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ContractOut_Location::has_x() const {
  return _internal_has_x();
}
inline void ContractOut_Location::clear_x() {
  x_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ContractOut_Location::x() const {
  // @@protoc_insertion_point(field_get:contract_out.ContractOut.Location.x)
  return _internal_x();
}
inline void ContractOut_Location::set_x(const std::string& value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:contract_out.ContractOut.Location.x)
}
inline std::string* ContractOut_Location::mutable_x() {
  // @@protoc_insertion_point(field_mutable:contract_out.ContractOut.Location.x)
  return _internal_mutable_x();
}
inline const std::string& ContractOut_Location::_internal_x() const {
  return x_.GetNoArena();
}
inline void ContractOut_Location::_internal_set_x(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  x_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ContractOut_Location::set_x(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  x_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:contract_out.ContractOut.Location.x)
}
inline void ContractOut_Location::set_x(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  x_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:contract_out.ContractOut.Location.x)
}
inline void ContractOut_Location::set_x(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  x_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:contract_out.ContractOut.Location.x)
}
inline std::string* ContractOut_Location::_internal_mutable_x() {
  _has_bits_[0] |= 0x00000001u;
  return x_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ContractOut_Location::release_x() {
  // @@protoc_insertion_point(field_release:contract_out.ContractOut.Location.x)
  if (!has_x()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return x_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ContractOut_Location::set_allocated_x(std::string* x) {
  if (x != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  x_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), x);
  // @@protoc_insertion_point(field_set_allocated:contract_out.ContractOut.Location.x)
}

// optional string y = 2;
inline bool ContractOut_Location::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ContractOut_Location::has_y() const {
  return _internal_has_y();
}
inline void ContractOut_Location::clear_y() {
  y_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ContractOut_Location::y() const {
  // @@protoc_insertion_point(field_get:contract_out.ContractOut.Location.y)
  return _internal_y();
}
inline void ContractOut_Location::set_y(const std::string& value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:contract_out.ContractOut.Location.y)
}
inline std::string* ContractOut_Location::mutable_y() {
  // @@protoc_insertion_point(field_mutable:contract_out.ContractOut.Location.y)
  return _internal_mutable_y();
}
inline const std::string& ContractOut_Location::_internal_y() const {
  return y_.GetNoArena();
}
inline void ContractOut_Location::_internal_set_y(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  y_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ContractOut_Location::set_y(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  y_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:contract_out.ContractOut.Location.y)
}
inline void ContractOut_Location::set_y(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  y_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:contract_out.ContractOut.Location.y)
}
inline void ContractOut_Location::set_y(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  y_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:contract_out.ContractOut.Location.y)
}
inline std::string* ContractOut_Location::_internal_mutable_y() {
  _has_bits_[0] |= 0x00000002u;
  return y_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ContractOut_Location::release_y() {
  // @@protoc_insertion_point(field_release:contract_out.ContractOut.Location.y)
  if (!has_y()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return y_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ContractOut_Location::set_allocated_y(std::string* y) {
  if (y != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  y_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), y);
  // @@protoc_insertion_point(field_set_allocated:contract_out.ContractOut.Location.y)
}

// -------------------------------------------------------------------

// ContractOut_Area

// optional .contract_out.ContractOut.Location center = 1;
inline bool ContractOut_Area::_internal_has_center() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || center_ != nullptr);
  return value;
}
inline bool ContractOut_Area::has_center() const {
  return _internal_has_center();
}
inline void ContractOut_Area::clear_center() {
  if (center_ != nullptr) center_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::contract_out::ContractOut_Location& ContractOut_Area::_internal_center() const {
  const ::contract_out::ContractOut_Location* p = center_;
  return p != nullptr ? *p : *reinterpret_cast<const ::contract_out::ContractOut_Location*>(
      &::contract_out::_ContractOut_Location_default_instance_);
}
inline const ::contract_out::ContractOut_Location& ContractOut_Area::center() const {
  // @@protoc_insertion_point(field_get:contract_out.ContractOut.Area.center)
  return _internal_center();
}
inline ::contract_out::ContractOut_Location* ContractOut_Area::release_center() {
  // @@protoc_insertion_point(field_release:contract_out.ContractOut.Area.center)
  _has_bits_[0] &= ~0x00000002u;
  ::contract_out::ContractOut_Location* temp = center_;
  center_ = nullptr;
  return temp;
}
inline ::contract_out::ContractOut_Location* ContractOut_Area::_internal_mutable_center() {
  _has_bits_[0] |= 0x00000002u;
  if (center_ == nullptr) {
    auto* p = CreateMaybeMessage<::contract_out::ContractOut_Location>(GetArenaNoVirtual());
    center_ = p;
  }
  return center_;
}
inline ::contract_out::ContractOut_Location* ContractOut_Area::mutable_center() {
  // @@protoc_insertion_point(field_mutable:contract_out.ContractOut.Area.center)
  return _internal_mutable_center();
}
inline void ContractOut_Area::set_allocated_center(::contract_out::ContractOut_Location* center) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete center_;
  }
  if (center) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      center = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, center, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  center_ = center;
  // @@protoc_insertion_point(field_set_allocated:contract_out.ContractOut.Area.center)
}

// optional string radius = 2;
inline bool ContractOut_Area::_internal_has_radius() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ContractOut_Area::has_radius() const {
  return _internal_has_radius();
}
inline void ContractOut_Area::clear_radius() {
  radius_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ContractOut_Area::radius() const {
  // @@protoc_insertion_point(field_get:contract_out.ContractOut.Area.radius)
  return _internal_radius();
}
inline void ContractOut_Area::set_radius(const std::string& value) {
  _internal_set_radius(value);
  // @@protoc_insertion_point(field_set:contract_out.ContractOut.Area.radius)
}
inline std::string* ContractOut_Area::mutable_radius() {
  // @@protoc_insertion_point(field_mutable:contract_out.ContractOut.Area.radius)
  return _internal_mutable_radius();
}
inline const std::string& ContractOut_Area::_internal_radius() const {
  return radius_.GetNoArena();
}
inline void ContractOut_Area::_internal_set_radius(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  radius_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ContractOut_Area::set_radius(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  radius_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:contract_out.ContractOut.Area.radius)
}
inline void ContractOut_Area::set_radius(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  radius_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:contract_out.ContractOut.Area.radius)
}
inline void ContractOut_Area::set_radius(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  radius_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:contract_out.ContractOut.Area.radius)
}
inline std::string* ContractOut_Area::_internal_mutable_radius() {
  _has_bits_[0] |= 0x00000001u;
  return radius_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ContractOut_Area::release_radius() {
  // @@protoc_insertion_point(field_release:contract_out.ContractOut.Area.radius)
  if (!has_radius()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return radius_.ReleaseNonDefaultNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ContractOut_Area::set_allocated_radius(std::string* radius) {
  if (radius != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  radius_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), radius);
  // @@protoc_insertion_point(field_set_allocated:contract_out.ContractOut.Area.radius)
}

// -------------------------------------------------------------------

// ContractOut_UpdateUser

// optional int32 relayId = 1;
inline bool ContractOut_UpdateUser::_internal_has_relayid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ContractOut_UpdateUser::has_relayid() const {
  return _internal_has_relayid();
}
inline void ContractOut_UpdateUser::clear_relayid() {
  relayid_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ContractOut_UpdateUser::_internal_relayid() const {
  return relayid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ContractOut_UpdateUser::relayid() const {
  // @@protoc_insertion_point(field_get:contract_out.ContractOut.UpdateUser.relayId)
  return _internal_relayid();
}
inline void ContractOut_UpdateUser::_internal_set_relayid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  relayid_ = value;
}
inline void ContractOut_UpdateUser::set_relayid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_relayid(value);
  // @@protoc_insertion_point(field_set:contract_out.ContractOut.UpdateUser.relayId)
}

// optional int32 userId = 2;
inline bool ContractOut_UpdateUser::_internal_has_userid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ContractOut_UpdateUser::has_userid() const {
  return _internal_has_userid();
}
inline void ContractOut_UpdateUser::clear_userid() {
  userid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ContractOut_UpdateUser::_internal_userid() const {
  return userid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ContractOut_UpdateUser::userid() const {
  // @@protoc_insertion_point(field_get:contract_out.ContractOut.UpdateUser.userId)
  return _internal_userid();
}
inline void ContractOut_UpdateUser::_internal_set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  userid_ = value;
}
inline void ContractOut_UpdateUser::set_userid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_userid(value);
  // @@protoc_insertion_point(field_set:contract_out.ContractOut.UpdateUser.userId)
}

// optional .contract_out.ContractOut.Action action = 3;
inline bool ContractOut_UpdateUser::_internal_has_action() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ContractOut_UpdateUser::has_action() const {
  return _internal_has_action();
}
inline void ContractOut_UpdateUser::clear_action() {
  action_ = 1;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::contract_out::ContractOut_Action ContractOut_UpdateUser::_internal_action() const {
  return static_cast< ::contract_out::ContractOut_Action >(action_);
}
inline ::contract_out::ContractOut_Action ContractOut_UpdateUser::action() const {
  // @@protoc_insertion_point(field_get:contract_out.ContractOut.UpdateUser.action)
  return _internal_action();
}
inline void ContractOut_UpdateUser::_internal_set_action(::contract_out::ContractOut_Action value) {
  assert(::contract_out::ContractOut_Action_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  action_ = value;
}
inline void ContractOut_UpdateUser::set_action(::contract_out::ContractOut_Action value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:contract_out.ContractOut.UpdateUser.action)
}

// optional .contract_out.ContractOut.Event event = 4;
inline bool ContractOut_UpdateUser::_internal_has_event() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ContractOut_UpdateUser::has_event() const {
  return _internal_has_event();
}
inline void ContractOut_UpdateUser::clear_event() {
  event_ = 1;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::contract_out::ContractOut_Event ContractOut_UpdateUser::_internal_event() const {
  return static_cast< ::contract_out::ContractOut_Event >(event_);
}
inline ::contract_out::ContractOut_Event ContractOut_UpdateUser::event() const {
  // @@protoc_insertion_point(field_get:contract_out.ContractOut.UpdateUser.event)
  return _internal_event();
}
inline void ContractOut_UpdateUser::_internal_set_event(::contract_out::ContractOut_Event value) {
  assert(::contract_out::ContractOut_Event_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  event_ = value;
}
inline void ContractOut_UpdateUser::set_event(::contract_out::ContractOut_Event value) {
  _internal_set_event(value);
  // @@protoc_insertion_point(field_set:contract_out.ContractOut.UpdateUser.event)
}

// -------------------------------------------------------------------

// ContractOut_UpdateRoutingTable

// optional int32 relayId = 1;
inline bool ContractOut_UpdateRoutingTable::_internal_has_relayid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ContractOut_UpdateRoutingTable::has_relayid() const {
  return _internal_has_relayid();
}
inline void ContractOut_UpdateRoutingTable::clear_relayid() {
  relayid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ContractOut_UpdateRoutingTable::_internal_relayid() const {
  return relayid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ContractOut_UpdateRoutingTable::relayid() const {
  // @@protoc_insertion_point(field_get:contract_out.ContractOut.UpdateRoutingTable.relayId)
  return _internal_relayid();
}
inline void ContractOut_UpdateRoutingTable::_internal_set_relayid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  relayid_ = value;
}
inline void ContractOut_UpdateRoutingTable::set_relayid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_relayid(value);
  // @@protoc_insertion_point(field_set:contract_out.ContractOut.UpdateRoutingTable.relayId)
}

// optional .contract_out.ContractOut.Route route = 2;
inline bool ContractOut_UpdateRoutingTable::_internal_has_route() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || route_ != nullptr);
  return value;
}
inline bool ContractOut_UpdateRoutingTable::has_route() const {
  return _internal_has_route();
}
inline void ContractOut_UpdateRoutingTable::clear_route() {
  if (route_ != nullptr) route_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::contract_out::ContractOut_Route& ContractOut_UpdateRoutingTable::_internal_route() const {
  const ::contract_out::ContractOut_Route* p = route_;
  return p != nullptr ? *p : *reinterpret_cast<const ::contract_out::ContractOut_Route*>(
      &::contract_out::_ContractOut_Route_default_instance_);
}
inline const ::contract_out::ContractOut_Route& ContractOut_UpdateRoutingTable::route() const {
  // @@protoc_insertion_point(field_get:contract_out.ContractOut.UpdateRoutingTable.route)
  return _internal_route();
}
inline ::contract_out::ContractOut_Route* ContractOut_UpdateRoutingTable::release_route() {
  // @@protoc_insertion_point(field_release:contract_out.ContractOut.UpdateRoutingTable.route)
  _has_bits_[0] &= ~0x00000001u;
  ::contract_out::ContractOut_Route* temp = route_;
  route_ = nullptr;
  return temp;
}
inline ::contract_out::ContractOut_Route* ContractOut_UpdateRoutingTable::_internal_mutable_route() {
  _has_bits_[0] |= 0x00000001u;
  if (route_ == nullptr) {
    auto* p = CreateMaybeMessage<::contract_out::ContractOut_Route>(GetArenaNoVirtual());
    route_ = p;
  }
  return route_;
}
inline ::contract_out::ContractOut_Route* ContractOut_UpdateRoutingTable::mutable_route() {
  // @@protoc_insertion_point(field_mutable:contract_out.ContractOut.UpdateRoutingTable.route)
  return _internal_mutable_route();
}
inline void ContractOut_UpdateRoutingTable::set_allocated_route(::contract_out::ContractOut_Route* route) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete route_;
  }
  if (route) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      route = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, route, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  route_ = route;
  // @@protoc_insertion_point(field_set_allocated:contract_out.ContractOut.UpdateRoutingTable.route)
}

// optional .contract_out.ContractOut.Action action = 3;
inline bool ContractOut_UpdateRoutingTable::_internal_has_action() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ContractOut_UpdateRoutingTable::has_action() const {
  return _internal_has_action();
}
inline void ContractOut_UpdateRoutingTable::clear_action() {
  action_ = 1;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::contract_out::ContractOut_Action ContractOut_UpdateRoutingTable::_internal_action() const {
  return static_cast< ::contract_out::ContractOut_Action >(action_);
}
inline ::contract_out::ContractOut_Action ContractOut_UpdateRoutingTable::action() const {
  // @@protoc_insertion_point(field_get:contract_out.ContractOut.UpdateRoutingTable.action)
  return _internal_action();
}
inline void ContractOut_UpdateRoutingTable::_internal_set_action(::contract_out::ContractOut_Action value) {
  assert(::contract_out::ContractOut_Action_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  action_ = value;
}
inline void ContractOut_UpdateRoutingTable::set_action(::contract_out::ContractOut_Action value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:contract_out.ContractOut.UpdateRoutingTable.action)
}

// -------------------------------------------------------------------

// ContractOut_UpdateArea

// optional int32 relayId = 1;
inline bool ContractOut_UpdateArea::_internal_has_relayid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ContractOut_UpdateArea::has_relayid() const {
  return _internal_has_relayid();
}
inline void ContractOut_UpdateArea::clear_relayid() {
  relayid_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ContractOut_UpdateArea::_internal_relayid() const {
  return relayid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ContractOut_UpdateArea::relayid() const {
  // @@protoc_insertion_point(field_get:contract_out.ContractOut.UpdateArea.relayId)
  return _internal_relayid();
}
inline void ContractOut_UpdateArea::_internal_set_relayid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  relayid_ = value;
}
inline void ContractOut_UpdateArea::set_relayid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_relayid(value);
  // @@protoc_insertion_point(field_set:contract_out.ContractOut.UpdateArea.relayId)
}

// optional .contract_out.ContractOut.Area area = 2;
inline bool ContractOut_UpdateArea::_internal_has_area() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || area_ != nullptr);
  return value;
}
inline bool ContractOut_UpdateArea::has_area() const {
  return _internal_has_area();
}
inline void ContractOut_UpdateArea::clear_area() {
  if (area_ != nullptr) area_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::contract_out::ContractOut_Area& ContractOut_UpdateArea::_internal_area() const {
  const ::contract_out::ContractOut_Area* p = area_;
  return p != nullptr ? *p : *reinterpret_cast<const ::contract_out::ContractOut_Area*>(
      &::contract_out::_ContractOut_Area_default_instance_);
}
inline const ::contract_out::ContractOut_Area& ContractOut_UpdateArea::area() const {
  // @@protoc_insertion_point(field_get:contract_out.ContractOut.UpdateArea.area)
  return _internal_area();
}
inline ::contract_out::ContractOut_Area* ContractOut_UpdateArea::release_area() {
  // @@protoc_insertion_point(field_release:contract_out.ContractOut.UpdateArea.area)
  _has_bits_[0] &= ~0x00000001u;
  ::contract_out::ContractOut_Area* temp = area_;
  area_ = nullptr;
  return temp;
}
inline ::contract_out::ContractOut_Area* ContractOut_UpdateArea::_internal_mutable_area() {
  _has_bits_[0] |= 0x00000001u;
  if (area_ == nullptr) {
    auto* p = CreateMaybeMessage<::contract_out::ContractOut_Area>(GetArenaNoVirtual());
    area_ = p;
  }
  return area_;
}
inline ::contract_out::ContractOut_Area* ContractOut_UpdateArea::mutable_area() {
  // @@protoc_insertion_point(field_mutable:contract_out.ContractOut.UpdateArea.area)
  return _internal_mutable_area();
}
inline void ContractOut_UpdateArea::set_allocated_area(::contract_out::ContractOut_Area* area) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete area_;
  }
  if (area) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      area = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, area, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  area_ = area;
  // @@protoc_insertion_point(field_set_allocated:contract_out.ContractOut.UpdateArea.area)
}

// -------------------------------------------------------------------

// ContractOut

// required bool isACK = 1;
inline bool ContractOut::_internal_has_isack() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ContractOut::has_isack() const {
  return _internal_has_isack();
}
inline void ContractOut::clear_isack() {
  isack_ = false;
  _has_bits_[0] &= ~0x00000001u;
}
inline bool ContractOut::_internal_isack() const {
  return isack_;
}
inline bool ContractOut::isack() const {
  // @@protoc_insertion_point(field_get:contract_out.ContractOut.isACK)
  return _internal_isack();
}
inline void ContractOut::_internal_set_isack(bool value) {
  _has_bits_[0] |= 0x00000001u;
  isack_ = value;
}
inline void ContractOut::set_isack(bool value) {
  _internal_set_isack(value);
  // @@protoc_insertion_point(field_set:contract_out.ContractOut.isACK)
}

// repeated .contract_out.ContractOut.UpdateUser updateUser = 2;
inline int ContractOut::_internal_updateuser_size() const {
  return updateuser_.size();
}
inline int ContractOut::updateuser_size() const {
  return _internal_updateuser_size();
}
inline void ContractOut::clear_updateuser() {
  updateuser_.Clear();
}
inline ::contract_out::ContractOut_UpdateUser* ContractOut::mutable_updateuser(int index) {
  // @@protoc_insertion_point(field_mutable:contract_out.ContractOut.updateUser)
  return updateuser_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::contract_out::ContractOut_UpdateUser >*
ContractOut::mutable_updateuser() {
  // @@protoc_insertion_point(field_mutable_list:contract_out.ContractOut.updateUser)
  return &updateuser_;
}
inline const ::contract_out::ContractOut_UpdateUser& ContractOut::_internal_updateuser(int index) const {
  return updateuser_.Get(index);
}
inline const ::contract_out::ContractOut_UpdateUser& ContractOut::updateuser(int index) const {
  // @@protoc_insertion_point(field_get:contract_out.ContractOut.updateUser)
  return _internal_updateuser(index);
}
inline ::contract_out::ContractOut_UpdateUser* ContractOut::_internal_add_updateuser() {
  return updateuser_.Add();
}
inline ::contract_out::ContractOut_UpdateUser* ContractOut::add_updateuser() {
  // @@protoc_insertion_point(field_add:contract_out.ContractOut.updateUser)
  return _internal_add_updateuser();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::contract_out::ContractOut_UpdateUser >&
ContractOut::updateuser() const {
  // @@protoc_insertion_point(field_list:contract_out.ContractOut.updateUser)
  return updateuser_;
}

// repeated .contract_out.ContractOut.UpdateRoutingTable updateRoutingTable = 3;
inline int ContractOut::_internal_updateroutingtable_size() const {
  return updateroutingtable_.size();
}
inline int ContractOut::updateroutingtable_size() const {
  return _internal_updateroutingtable_size();
}
inline void ContractOut::clear_updateroutingtable() {
  updateroutingtable_.Clear();
}
inline ::contract_out::ContractOut_UpdateRoutingTable* ContractOut::mutable_updateroutingtable(int index) {
  // @@protoc_insertion_point(field_mutable:contract_out.ContractOut.updateRoutingTable)
  return updateroutingtable_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::contract_out::ContractOut_UpdateRoutingTable >*
ContractOut::mutable_updateroutingtable() {
  // @@protoc_insertion_point(field_mutable_list:contract_out.ContractOut.updateRoutingTable)
  return &updateroutingtable_;
}
inline const ::contract_out::ContractOut_UpdateRoutingTable& ContractOut::_internal_updateroutingtable(int index) const {
  return updateroutingtable_.Get(index);
}
inline const ::contract_out::ContractOut_UpdateRoutingTable& ContractOut::updateroutingtable(int index) const {
  // @@protoc_insertion_point(field_get:contract_out.ContractOut.updateRoutingTable)
  return _internal_updateroutingtable(index);
}
inline ::contract_out::ContractOut_UpdateRoutingTable* ContractOut::_internal_add_updateroutingtable() {
  return updateroutingtable_.Add();
}
inline ::contract_out::ContractOut_UpdateRoutingTable* ContractOut::add_updateroutingtable() {
  // @@protoc_insertion_point(field_add:contract_out.ContractOut.updateRoutingTable)
  return _internal_add_updateroutingtable();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::contract_out::ContractOut_UpdateRoutingTable >&
ContractOut::updateroutingtable() const {
  // @@protoc_insertion_point(field_list:contract_out.ContractOut.updateRoutingTable)
  return updateroutingtable_;
}

// repeated .contract_out.ContractOut.UpdateArea updateArea = 4;
inline int ContractOut::_internal_updatearea_size() const {
  return updatearea_.size();
}
inline int ContractOut::updatearea_size() const {
  return _internal_updatearea_size();
}
inline void ContractOut::clear_updatearea() {
  updatearea_.Clear();
}
inline ::contract_out::ContractOut_UpdateArea* ContractOut::mutable_updatearea(int index) {
  // @@protoc_insertion_point(field_mutable:contract_out.ContractOut.updateArea)
  return updatearea_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::contract_out::ContractOut_UpdateArea >*
ContractOut::mutable_updatearea() {
  // @@protoc_insertion_point(field_mutable_list:contract_out.ContractOut.updateArea)
  return &updatearea_;
}
inline const ::contract_out::ContractOut_UpdateArea& ContractOut::_internal_updatearea(int index) const {
  return updatearea_.Get(index);
}
inline const ::contract_out::ContractOut_UpdateArea& ContractOut::updatearea(int index) const {
  // @@protoc_insertion_point(field_get:contract_out.ContractOut.updateArea)
  return _internal_updatearea(index);
}
inline ::contract_out::ContractOut_UpdateArea* ContractOut::_internal_add_updatearea() {
  return updatearea_.Add();
}
inline ::contract_out::ContractOut_UpdateArea* ContractOut::add_updatearea() {
  // @@protoc_insertion_point(field_add:contract_out.ContractOut.updateArea)
  return _internal_add_updatearea();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::contract_out::ContractOut_UpdateArea >&
ContractOut::updatearea() const {
  // @@protoc_insertion_point(field_list:contract_out.ContractOut.updateArea)
  return updatearea_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace contract_out

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::contract_out::ContractOut_Action> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::contract_out::ContractOut_Action>() {
  return ::contract_out::ContractOut_Action_descriptor();
}
template <> struct is_proto_enum< ::contract_out::ContractOut_Event> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::contract_out::ContractOut_Event>() {
  return ::contract_out::ContractOut_Event_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_contract_5fout_2eproto

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: contract_out.proto

#include "contract_out.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_contract_5fout_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ContractOut_Area_contract_5fout_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_contract_5fout_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ContractOut_Location_contract_5fout_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_contract_5fout_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ContractOut_Route_contract_5fout_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_contract_5fout_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ContractOut_UpdateArea_contract_5fout_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_contract_5fout_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ContractOut_UpdateRoutingTable_contract_5fout_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_contract_5fout_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ContractOut_UpdateUser_contract_5fout_2eproto;
namespace contract_out {
class ContractOut_RouteDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContractOut_Route> _instance;
} _ContractOut_Route_default_instance_;
class ContractOut_LocationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContractOut_Location> _instance;
} _ContractOut_Location_default_instance_;
class ContractOut_AreaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContractOut_Area> _instance;
} _ContractOut_Area_default_instance_;
class ContractOut_UpdateUserDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContractOut_UpdateUser> _instance;
} _ContractOut_UpdateUser_default_instance_;
class ContractOut_UpdateRoutingTableDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContractOut_UpdateRoutingTable> _instance;
} _ContractOut_UpdateRoutingTable_default_instance_;
class ContractOut_UpdateAreaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContractOut_UpdateArea> _instance;
} _ContractOut_UpdateArea_default_instance_;
class ContractOutDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContractOut> _instance;
} _ContractOut_default_instance_;
}  // namespace contract_out
static void InitDefaultsscc_info_ContractOut_contract_5fout_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::contract_out::_ContractOut_default_instance_;
    new (ptr) ::contract_out::ContractOut();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::contract_out::ContractOut::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ContractOut_contract_5fout_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_ContractOut_contract_5fout_2eproto}, {
      &scc_info_ContractOut_UpdateUser_contract_5fout_2eproto.base,
      &scc_info_ContractOut_UpdateRoutingTable_contract_5fout_2eproto.base,
      &scc_info_ContractOut_UpdateArea_contract_5fout_2eproto.base,}};

static void InitDefaultsscc_info_ContractOut_Area_contract_5fout_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::contract_out::_ContractOut_Area_default_instance_;
    new (ptr) ::contract_out::ContractOut_Area();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::contract_out::ContractOut_Area::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ContractOut_Area_contract_5fout_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ContractOut_Area_contract_5fout_2eproto}, {
      &scc_info_ContractOut_Location_contract_5fout_2eproto.base,}};

static void InitDefaultsscc_info_ContractOut_Location_contract_5fout_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::contract_out::_ContractOut_Location_default_instance_;
    new (ptr) ::contract_out::ContractOut_Location();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::contract_out::ContractOut_Location::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ContractOut_Location_contract_5fout_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ContractOut_Location_contract_5fout_2eproto}, {}};

static void InitDefaultsscc_info_ContractOut_Route_contract_5fout_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::contract_out::_ContractOut_Route_default_instance_;
    new (ptr) ::contract_out::ContractOut_Route();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::contract_out::ContractOut_Route::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ContractOut_Route_contract_5fout_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ContractOut_Route_contract_5fout_2eproto}, {}};

static void InitDefaultsscc_info_ContractOut_UpdateArea_contract_5fout_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::contract_out::_ContractOut_UpdateArea_default_instance_;
    new (ptr) ::contract_out::ContractOut_UpdateArea();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::contract_out::ContractOut_UpdateArea::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ContractOut_UpdateArea_contract_5fout_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ContractOut_UpdateArea_contract_5fout_2eproto}, {
      &scc_info_ContractOut_Area_contract_5fout_2eproto.base,}};

static void InitDefaultsscc_info_ContractOut_UpdateRoutingTable_contract_5fout_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::contract_out::_ContractOut_UpdateRoutingTable_default_instance_;
    new (ptr) ::contract_out::ContractOut_UpdateRoutingTable();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::contract_out::ContractOut_UpdateRoutingTable::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ContractOut_UpdateRoutingTable_contract_5fout_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ContractOut_UpdateRoutingTable_contract_5fout_2eproto}, {
      &scc_info_ContractOut_Route_contract_5fout_2eproto.base,}};

static void InitDefaultsscc_info_ContractOut_UpdateUser_contract_5fout_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::contract_out::_ContractOut_UpdateUser_default_instance_;
    new (ptr) ::contract_out::ContractOut_UpdateUser();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::contract_out::ContractOut_UpdateUser::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ContractOut_UpdateUser_contract_5fout_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ContractOut_UpdateUser_contract_5fout_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_contract_5fout_2eproto[7];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_contract_5fout_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_contract_5fout_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_contract_5fout_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::contract_out::ContractOut_Route, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::contract_out::ContractOut_Route, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::contract_out::ContractOut_Route, destination_),
  PROTOBUF_FIELD_OFFSET(::contract_out::ContractOut_Route, nexthop_),
  PROTOBUF_FIELD_OFFSET(::contract_out::ContractOut_Route, drop_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::contract_out::ContractOut_Location, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::contract_out::ContractOut_Location, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::contract_out::ContractOut_Location, x_),
  PROTOBUF_FIELD_OFFSET(::contract_out::ContractOut_Location, y_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::contract_out::ContractOut_Area, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::contract_out::ContractOut_Area, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::contract_out::ContractOut_Area, center_),
  PROTOBUF_FIELD_OFFSET(::contract_out::ContractOut_Area, radius_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::contract_out::ContractOut_UpdateUser, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::contract_out::ContractOut_UpdateUser, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::contract_out::ContractOut_UpdateUser, relayid_),
  PROTOBUF_FIELD_OFFSET(::contract_out::ContractOut_UpdateUser, userid_),
  PROTOBUF_FIELD_OFFSET(::contract_out::ContractOut_UpdateUser, action_),
  PROTOBUF_FIELD_OFFSET(::contract_out::ContractOut_UpdateUser, event_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::contract_out::ContractOut_UpdateRoutingTable, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::contract_out::ContractOut_UpdateRoutingTable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::contract_out::ContractOut_UpdateRoutingTable, relayid_),
  PROTOBUF_FIELD_OFFSET(::contract_out::ContractOut_UpdateRoutingTable, route_),
  PROTOBUF_FIELD_OFFSET(::contract_out::ContractOut_UpdateRoutingTable, action_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::contract_out::ContractOut_UpdateArea, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::contract_out::ContractOut_UpdateArea, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::contract_out::ContractOut_UpdateArea, relayid_),
  PROTOBUF_FIELD_OFFSET(::contract_out::ContractOut_UpdateArea, area_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::contract_out::ContractOut, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::contract_out::ContractOut, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::contract_out::ContractOut, isack_),
  PROTOBUF_FIELD_OFFSET(::contract_out::ContractOut, updateuser_),
  PROTOBUF_FIELD_OFFSET(::contract_out::ContractOut, updateroutingtable_),
  PROTOBUF_FIELD_OFFSET(::contract_out::ContractOut, updatearea_),
  0,
  ~0u,
  ~0u,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::contract_out::ContractOut_Route)},
  { 11, 18, sizeof(::contract_out::ContractOut_Location)},
  { 20, 27, sizeof(::contract_out::ContractOut_Area)},
  { 29, 38, sizeof(::contract_out::ContractOut_UpdateUser)},
  { 42, 50, sizeof(::contract_out::ContractOut_UpdateRoutingTable)},
  { 53, 60, sizeof(::contract_out::ContractOut_UpdateArea)},
  { 62, 71, sizeof(::contract_out::ContractOut)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::contract_out::_ContractOut_Route_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::contract_out::_ContractOut_Location_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::contract_out::_ContractOut_Area_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::contract_out::_ContractOut_UpdateUser_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::contract_out::_ContractOut_UpdateRoutingTable_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::contract_out::_ContractOut_UpdateArea_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::contract_out::_ContractOut_default_instance_),
};

const char descriptor_table_protodef_contract_5fout_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022contract_out.proto\022\014contract_out\"\274\006\n\013C"
  "ontractOut\022\r\n\005isACK\030\001 \002(\010\0228\n\nupdateUser\030"
  "\002 \003(\0132$.contract_out.ContractOut.UpdateU"
  "ser\022H\n\022updateRoutingTable\030\003 \003(\0132,.contra"
  "ct_out.ContractOut.UpdateRoutingTable\0228\n"
  "\nupdateArea\030\004 \003(\0132$.contract_out.Contrac"
  "tOut.UpdateArea\032;\n\005Route\022\023\n\013destination\030"
  "\001 \001(\005\022\017\n\007nextHop\030\002 \001(\005\022\014\n\004drop\030\003 \001(\010\032 \n\010"
  "Location\022\t\n\001x\030\001 \001(\t\022\t\n\001y\030\002 \001(\t\032J\n\004Area\0222"
  "\n\006center\030\001 \001(\0132\".contract_out.ContractOu"
  "t.Location\022\016\n\006radius\030\002 \001(\t\032\217\001\n\nUpdateUse"
  "r\022\017\n\007relayId\030\001 \001(\005\022\016\n\006userId\030\002 \001(\005\0220\n\006ac"
  "tion\030\003 \001(\0162 .contract_out.ContractOut.Ac"
  "tion\022.\n\005event\030\004 \001(\0162\037.contract_out.Contr"
  "actOut.Event\032\207\001\n\022UpdateRoutingTable\022\017\n\007r"
  "elayId\030\001 \001(\005\022.\n\005route\030\002 \001(\0132\037.contract_o"
  "ut.ContractOut.Route\0220\n\006action\030\003 \001(\0162 .c"
  "ontract_out.ContractOut.Action\032K\n\nUpdate"
  "Area\022\017\n\007relayId\030\001 \001(\005\022,\n\004area\030\002 \001(\0132\036.co"
  "ntract_out.ContractOut.Area\")\n\006Action\022\007\n"
  "\003ADD\020\001\022\n\n\006DELETE\020\002\022\n\n\006UPDATE\020\003\"!\n\005Event\022"
  "\n\n\006FORCED\020\001\022\014\n\010REQUIRED\020\002"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_contract_5fout_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_contract_5fout_2eproto_sccs[7] = {
  &scc_info_ContractOut_contract_5fout_2eproto.base,
  &scc_info_ContractOut_Area_contract_5fout_2eproto.base,
  &scc_info_ContractOut_Location_contract_5fout_2eproto.base,
  &scc_info_ContractOut_Route_contract_5fout_2eproto.base,
  &scc_info_ContractOut_UpdateArea_contract_5fout_2eproto.base,
  &scc_info_ContractOut_UpdateRoutingTable_contract_5fout_2eproto.base,
  &scc_info_ContractOut_UpdateUser_contract_5fout_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_contract_5fout_2eproto_once;
static bool descriptor_table_contract_5fout_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_contract_5fout_2eproto = {
  &descriptor_table_contract_5fout_2eproto_initialized, descriptor_table_protodef_contract_5fout_2eproto, "contract_out.proto", 865,
  &descriptor_table_contract_5fout_2eproto_once, descriptor_table_contract_5fout_2eproto_sccs, descriptor_table_contract_5fout_2eproto_deps, 7, 0,
  schemas, file_default_instances, TableStruct_contract_5fout_2eproto::offsets,
  file_level_metadata_contract_5fout_2eproto, 7, file_level_enum_descriptors_contract_5fout_2eproto, file_level_service_descriptors_contract_5fout_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_contract_5fout_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_contract_5fout_2eproto), true);
namespace contract_out {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ContractOut_Action_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_contract_5fout_2eproto);
  return file_level_enum_descriptors_contract_5fout_2eproto[0];
}
bool ContractOut_Action_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ContractOut_Action ContractOut::ADD;
constexpr ContractOut_Action ContractOut::DELETE;
constexpr ContractOut_Action ContractOut::UPDATE;
constexpr ContractOut_Action ContractOut::Action_MIN;
constexpr ContractOut_Action ContractOut::Action_MAX;
constexpr int ContractOut::Action_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ContractOut_Event_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_contract_5fout_2eproto);
  return file_level_enum_descriptors_contract_5fout_2eproto[1];
}
bool ContractOut_Event_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ContractOut_Event ContractOut::FORCED;
constexpr ContractOut_Event ContractOut::REQUIRED;
constexpr ContractOut_Event ContractOut::Event_MIN;
constexpr ContractOut_Event ContractOut::Event_MAX;
constexpr int ContractOut::Event_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void ContractOut_Route::InitAsDefaultInstance() {
}
class ContractOut_Route::_Internal {
 public:
  using HasBits = decltype(std::declval<ContractOut_Route>()._has_bits_);
  static void set_has_destination(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_nexthop(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_drop(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ContractOut_Route::ContractOut_Route()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:contract_out.ContractOut.Route)
}
ContractOut_Route::ContractOut_Route(const ContractOut_Route& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&destination_, &from.destination_,
    static_cast<size_t>(reinterpret_cast<char*>(&drop_) -
    reinterpret_cast<char*>(&destination_)) + sizeof(drop_));
  // @@protoc_insertion_point(copy_constructor:contract_out.ContractOut.Route)
}

void ContractOut_Route::SharedCtor() {
  ::memset(&destination_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&drop_) -
      reinterpret_cast<char*>(&destination_)) + sizeof(drop_));
}

ContractOut_Route::~ContractOut_Route() {
  // @@protoc_insertion_point(destructor:contract_out.ContractOut.Route)
  SharedDtor();
}

void ContractOut_Route::SharedDtor() {
}

void ContractOut_Route::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ContractOut_Route& ContractOut_Route::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ContractOut_Route_contract_5fout_2eproto.base);
  return *internal_default_instance();
}


void ContractOut_Route::Clear() {
// @@protoc_insertion_point(message_clear_start:contract_out.ContractOut.Route)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&destination_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&drop_) -
        reinterpret_cast<char*>(&destination_)) + sizeof(drop_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ContractOut_Route::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 destination = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_destination(&has_bits);
          destination_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 nextHop = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_nexthop(&has_bits);
          nexthop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool drop = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_drop(&has_bits);
          drop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContractOut_Route::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:contract_out.ContractOut.Route)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 destination = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_destination(), target);
  }

  // optional int32 nextHop = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_nexthop(), target);
  }

  // optional bool drop = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_drop(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:contract_out.ContractOut.Route)
  return target;
}

size_t ContractOut_Route::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:contract_out.ContractOut.Route)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional int32 destination = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_destination());
    }

    // optional int32 nextHop = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_nexthop());
    }

    // optional bool drop = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContractOut_Route::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:contract_out.ContractOut.Route)
  GOOGLE_DCHECK_NE(&from, this);
  const ContractOut_Route* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ContractOut_Route>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:contract_out.ContractOut.Route)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:contract_out.ContractOut.Route)
    MergeFrom(*source);
  }
}

void ContractOut_Route::MergeFrom(const ContractOut_Route& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:contract_out.ContractOut.Route)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      destination_ = from.destination_;
    }
    if (cached_has_bits & 0x00000002u) {
      nexthop_ = from.nexthop_;
    }
    if (cached_has_bits & 0x00000004u) {
      drop_ = from.drop_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ContractOut_Route::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:contract_out.ContractOut.Route)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContractOut_Route::CopyFrom(const ContractOut_Route& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:contract_out.ContractOut.Route)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContractOut_Route::IsInitialized() const {
  return true;
}

void ContractOut_Route::InternalSwap(ContractOut_Route* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(destination_, other->destination_);
  swap(nexthop_, other->nexthop_);
  swap(drop_, other->drop_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ContractOut_Route::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ContractOut_Location::InitAsDefaultInstance() {
}
class ContractOut_Location::_Internal {
 public:
  using HasBits = decltype(std::declval<ContractOut_Location>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ContractOut_Location::ContractOut_Location()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:contract_out.ContractOut.Location)
}
ContractOut_Location::ContractOut_Location(const ContractOut_Location& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  x_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_x()) {
    x_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.x_);
  }
  y_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_y()) {
    y_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.y_);
  }
  // @@protoc_insertion_point(copy_constructor:contract_out.ContractOut.Location)
}

void ContractOut_Location::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ContractOut_Location_contract_5fout_2eproto.base);
  x_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  y_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ContractOut_Location::~ContractOut_Location() {
  // @@protoc_insertion_point(destructor:contract_out.ContractOut.Location)
  SharedDtor();
}

void ContractOut_Location::SharedDtor() {
  x_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  y_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ContractOut_Location::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ContractOut_Location& ContractOut_Location::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ContractOut_Location_contract_5fout_2eproto.base);
  return *internal_default_instance();
}


void ContractOut_Location::Clear() {
// @@protoc_insertion_point(message_clear_start:contract_out.ContractOut.Location)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      x_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      y_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ContractOut_Location::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(_internal_mutable_x(), ptr, ctx, "contract_out.ContractOut.Location.x");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(_internal_mutable_y(), ptr, ctx, "contract_out.ContractOut.Location.y");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContractOut_Location::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:contract_out.ContractOut.Location)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string x = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_x().data(), static_cast<int>(this->_internal_x().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "contract_out.ContractOut.Location.x");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_x(), target);
  }

  // optional string y = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_y().data(), static_cast<int>(this->_internal_y().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "contract_out.ContractOut.Location.y");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:contract_out.ContractOut.Location)
  return target;
}

size_t ContractOut_Location::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:contract_out.ContractOut.Location)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_x());
    }

    // optional string y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_y());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContractOut_Location::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:contract_out.ContractOut.Location)
  GOOGLE_DCHECK_NE(&from, this);
  const ContractOut_Location* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ContractOut_Location>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:contract_out.ContractOut.Location)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:contract_out.ContractOut.Location)
    MergeFrom(*source);
  }
}

void ContractOut_Location::MergeFrom(const ContractOut_Location& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:contract_out.ContractOut.Location)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      x_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.x_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      y_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.y_);
    }
  }
}

void ContractOut_Location::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:contract_out.ContractOut.Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContractOut_Location::CopyFrom(const ContractOut_Location& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:contract_out.ContractOut.Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContractOut_Location::IsInitialized() const {
  return true;
}

void ContractOut_Location::InternalSwap(ContractOut_Location* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  x_.Swap(&other->x_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  y_.Swap(&other->y_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ContractOut_Location::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ContractOut_Area::InitAsDefaultInstance() {
  ::contract_out::_ContractOut_Area_default_instance_._instance.get_mutable()->center_ = const_cast< ::contract_out::ContractOut_Location*>(
      ::contract_out::ContractOut_Location::internal_default_instance());
}
class ContractOut_Area::_Internal {
 public:
  using HasBits = decltype(std::declval<ContractOut_Area>()._has_bits_);
  static const ::contract_out::ContractOut_Location& center(const ContractOut_Area* msg);
  static void set_has_center(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_radius(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::contract_out::ContractOut_Location&
ContractOut_Area::_Internal::center(const ContractOut_Area* msg) {
  return *msg->center_;
}
ContractOut_Area::ContractOut_Area()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:contract_out.ContractOut.Area)
}
ContractOut_Area::ContractOut_Area(const ContractOut_Area& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  radius_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_radius()) {
    radius_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.radius_);
  }
  if (from._internal_has_center()) {
    center_ = new ::contract_out::ContractOut_Location(*from.center_);
  } else {
    center_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:contract_out.ContractOut.Area)
}

void ContractOut_Area::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ContractOut_Area_contract_5fout_2eproto.base);
  radius_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  center_ = nullptr;
}

ContractOut_Area::~ContractOut_Area() {
  // @@protoc_insertion_point(destructor:contract_out.ContractOut.Area)
  SharedDtor();
}

void ContractOut_Area::SharedDtor() {
  radius_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete center_;
}

void ContractOut_Area::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ContractOut_Area& ContractOut_Area::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ContractOut_Area_contract_5fout_2eproto.base);
  return *internal_default_instance();
}


void ContractOut_Area::Clear() {
// @@protoc_insertion_point(message_clear_start:contract_out.ContractOut.Area)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      radius_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(center_ != nullptr);
      center_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ContractOut_Area::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .contract_out.ContractOut.Location center = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_center(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string radius = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(_internal_mutable_radius(), ptr, ctx, "contract_out.ContractOut.Area.radius");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContractOut_Area::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:contract_out.ContractOut.Area)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .contract_out.ContractOut.Location center = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::center(this), target, stream);
  }

  // optional string radius = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_radius().data(), static_cast<int>(this->_internal_radius().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "contract_out.ContractOut.Area.radius");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_radius(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:contract_out.ContractOut.Area)
  return target;
}

size_t ContractOut_Area::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:contract_out.ContractOut.Area)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string radius = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_radius());
    }

    // optional .contract_out.ContractOut.Location center = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *center_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContractOut_Area::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:contract_out.ContractOut.Area)
  GOOGLE_DCHECK_NE(&from, this);
  const ContractOut_Area* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ContractOut_Area>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:contract_out.ContractOut.Area)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:contract_out.ContractOut.Area)
    MergeFrom(*source);
  }
}

void ContractOut_Area::MergeFrom(const ContractOut_Area& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:contract_out.ContractOut.Area)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      radius_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.radius_);
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_center()->::contract_out::ContractOut_Location::MergeFrom(from._internal_center());
    }
  }
}

void ContractOut_Area::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:contract_out.ContractOut.Area)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContractOut_Area::CopyFrom(const ContractOut_Area& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:contract_out.ContractOut.Area)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContractOut_Area::IsInitialized() const {
  return true;
}

void ContractOut_Area::InternalSwap(ContractOut_Area* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  radius_.Swap(&other->radius_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(center_, other->center_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ContractOut_Area::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ContractOut_UpdateUser::InitAsDefaultInstance() {
}
class ContractOut_UpdateUser::_Internal {
 public:
  using HasBits = decltype(std::declval<ContractOut_UpdateUser>()._has_bits_);
  static void set_has_relayid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_userid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_action(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_event(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

ContractOut_UpdateUser::ContractOut_UpdateUser()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:contract_out.ContractOut.UpdateUser)
}
ContractOut_UpdateUser::ContractOut_UpdateUser(const ContractOut_UpdateUser& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&relayid_, &from.relayid_,
    static_cast<size_t>(reinterpret_cast<char*>(&event_) -
    reinterpret_cast<char*>(&relayid_)) + sizeof(event_));
  // @@protoc_insertion_point(copy_constructor:contract_out.ContractOut.UpdateUser)
}

void ContractOut_UpdateUser::SharedCtor() {
  ::memset(&relayid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&userid_) -
      reinterpret_cast<char*>(&relayid_)) + sizeof(userid_));
  action_ = 1;
  event_ = 1;
}

ContractOut_UpdateUser::~ContractOut_UpdateUser() {
  // @@protoc_insertion_point(destructor:contract_out.ContractOut.UpdateUser)
  SharedDtor();
}

void ContractOut_UpdateUser::SharedDtor() {
}

void ContractOut_UpdateUser::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ContractOut_UpdateUser& ContractOut_UpdateUser::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ContractOut_UpdateUser_contract_5fout_2eproto.base);
  return *internal_default_instance();
}


void ContractOut_UpdateUser::Clear() {
// @@protoc_insertion_point(message_clear_start:contract_out.ContractOut.UpdateUser)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&relayid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&userid_) -
        reinterpret_cast<char*>(&relayid_)) + sizeof(userid_));
    action_ = 1;
    event_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ContractOut_UpdateUser::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 relayId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_relayid(&has_bits);
          relayid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 userId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_userid(&has_bits);
          userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .contract_out.ContractOut.Action action = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::contract_out::ContractOut_Action_IsValid(val))) {
            _internal_set_action(static_cast<::contract_out::ContractOut_Action>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .contract_out.ContractOut.Event event = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::contract_out::ContractOut_Event_IsValid(val))) {
            _internal_set_event(static_cast<::contract_out::ContractOut_Event>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContractOut_UpdateUser::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:contract_out.ContractOut.UpdateUser)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 relayId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_relayid(), target);
  }

  // optional int32 userId = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_userid(), target);
  }

  // optional .contract_out.ContractOut.Action action = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_action(), target);
  }

  // optional .contract_out.ContractOut.Event event = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_event(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:contract_out.ContractOut.UpdateUser)
  return target;
}

size_t ContractOut_UpdateUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:contract_out.ContractOut.UpdateUser)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional int32 relayId = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_relayid());
    }

    // optional int32 userId = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_userid());
    }

    // optional .contract_out.ContractOut.Action action = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_action());
    }

    // optional .contract_out.ContractOut.Event event = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContractOut_UpdateUser::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:contract_out.ContractOut.UpdateUser)
  GOOGLE_DCHECK_NE(&from, this);
  const ContractOut_UpdateUser* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ContractOut_UpdateUser>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:contract_out.ContractOut.UpdateUser)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:contract_out.ContractOut.UpdateUser)
    MergeFrom(*source);
  }
}

void ContractOut_UpdateUser::MergeFrom(const ContractOut_UpdateUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:contract_out.ContractOut.UpdateUser)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      relayid_ = from.relayid_;
    }
    if (cached_has_bits & 0x00000002u) {
      userid_ = from.userid_;
    }
    if (cached_has_bits & 0x00000004u) {
      action_ = from.action_;
    }
    if (cached_has_bits & 0x00000008u) {
      event_ = from.event_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ContractOut_UpdateUser::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:contract_out.ContractOut.UpdateUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContractOut_UpdateUser::CopyFrom(const ContractOut_UpdateUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:contract_out.ContractOut.UpdateUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContractOut_UpdateUser::IsInitialized() const {
  return true;
}

void ContractOut_UpdateUser::InternalSwap(ContractOut_UpdateUser* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(relayid_, other->relayid_);
  swap(userid_, other->userid_);
  swap(action_, other->action_);
  swap(event_, other->event_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ContractOut_UpdateUser::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ContractOut_UpdateRoutingTable::InitAsDefaultInstance() {
  ::contract_out::_ContractOut_UpdateRoutingTable_default_instance_._instance.get_mutable()->route_ = const_cast< ::contract_out::ContractOut_Route*>(
      ::contract_out::ContractOut_Route::internal_default_instance());
}
class ContractOut_UpdateRoutingTable::_Internal {
 public:
  using HasBits = decltype(std::declval<ContractOut_UpdateRoutingTable>()._has_bits_);
  static void set_has_relayid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::contract_out::ContractOut_Route& route(const ContractOut_UpdateRoutingTable* msg);
  static void set_has_route(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_action(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::contract_out::ContractOut_Route&
ContractOut_UpdateRoutingTable::_Internal::route(const ContractOut_UpdateRoutingTable* msg) {
  return *msg->route_;
}
ContractOut_UpdateRoutingTable::ContractOut_UpdateRoutingTable()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:contract_out.ContractOut.UpdateRoutingTable)
}
ContractOut_UpdateRoutingTable::ContractOut_UpdateRoutingTable(const ContractOut_UpdateRoutingTable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_route()) {
    route_ = new ::contract_out::ContractOut_Route(*from.route_);
  } else {
    route_ = nullptr;
  }
  ::memcpy(&relayid_, &from.relayid_,
    static_cast<size_t>(reinterpret_cast<char*>(&action_) -
    reinterpret_cast<char*>(&relayid_)) + sizeof(action_));
  // @@protoc_insertion_point(copy_constructor:contract_out.ContractOut.UpdateRoutingTable)
}

void ContractOut_UpdateRoutingTable::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ContractOut_UpdateRoutingTable_contract_5fout_2eproto.base);
  ::memset(&route_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&relayid_) -
      reinterpret_cast<char*>(&route_)) + sizeof(relayid_));
  action_ = 1;
}

ContractOut_UpdateRoutingTable::~ContractOut_UpdateRoutingTable() {
  // @@protoc_insertion_point(destructor:contract_out.ContractOut.UpdateRoutingTable)
  SharedDtor();
}

void ContractOut_UpdateRoutingTable::SharedDtor() {
  if (this != internal_default_instance()) delete route_;
}

void ContractOut_UpdateRoutingTable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ContractOut_UpdateRoutingTable& ContractOut_UpdateRoutingTable::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ContractOut_UpdateRoutingTable_contract_5fout_2eproto.base);
  return *internal_default_instance();
}


void ContractOut_UpdateRoutingTable::Clear() {
// @@protoc_insertion_point(message_clear_start:contract_out.ContractOut.UpdateRoutingTable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(route_ != nullptr);
    route_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    relayid_ = 0;
    action_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ContractOut_UpdateRoutingTable::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 relayId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_relayid(&has_bits);
          relayid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .contract_out.ContractOut.Route route = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_route(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .contract_out.ContractOut.Action action = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::contract_out::ContractOut_Action_IsValid(val))) {
            _internal_set_action(static_cast<::contract_out::ContractOut_Action>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContractOut_UpdateRoutingTable::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:contract_out.ContractOut.UpdateRoutingTable)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 relayId = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_relayid(), target);
  }

  // optional .contract_out.ContractOut.Route route = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::route(this), target, stream);
  }

  // optional .contract_out.ContractOut.Action action = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_action(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:contract_out.ContractOut.UpdateRoutingTable)
  return target;
}

size_t ContractOut_UpdateRoutingTable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:contract_out.ContractOut.UpdateRoutingTable)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .contract_out.ContractOut.Route route = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *route_);
    }

    // optional int32 relayId = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_relayid());
    }

    // optional .contract_out.ContractOut.Action action = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_action());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContractOut_UpdateRoutingTable::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:contract_out.ContractOut.UpdateRoutingTable)
  GOOGLE_DCHECK_NE(&from, this);
  const ContractOut_UpdateRoutingTable* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ContractOut_UpdateRoutingTable>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:contract_out.ContractOut.UpdateRoutingTable)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:contract_out.ContractOut.UpdateRoutingTable)
    MergeFrom(*source);
  }
}

void ContractOut_UpdateRoutingTable::MergeFrom(const ContractOut_UpdateRoutingTable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:contract_out.ContractOut.UpdateRoutingTable)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_route()->::contract_out::ContractOut_Route::MergeFrom(from._internal_route());
    }
    if (cached_has_bits & 0x00000002u) {
      relayid_ = from.relayid_;
    }
    if (cached_has_bits & 0x00000004u) {
      action_ = from.action_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ContractOut_UpdateRoutingTable::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:contract_out.ContractOut.UpdateRoutingTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContractOut_UpdateRoutingTable::CopyFrom(const ContractOut_UpdateRoutingTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:contract_out.ContractOut.UpdateRoutingTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContractOut_UpdateRoutingTable::IsInitialized() const {
  return true;
}

void ContractOut_UpdateRoutingTable::InternalSwap(ContractOut_UpdateRoutingTable* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(route_, other->route_);
  swap(relayid_, other->relayid_);
  swap(action_, other->action_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ContractOut_UpdateRoutingTable::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ContractOut_UpdateArea::InitAsDefaultInstance() {
  ::contract_out::_ContractOut_UpdateArea_default_instance_._instance.get_mutable()->area_ = const_cast< ::contract_out::ContractOut_Area*>(
      ::contract_out::ContractOut_Area::internal_default_instance());
}
class ContractOut_UpdateArea::_Internal {
 public:
  using HasBits = decltype(std::declval<ContractOut_UpdateArea>()._has_bits_);
  static void set_has_relayid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::contract_out::ContractOut_Area& area(const ContractOut_UpdateArea* msg);
  static void set_has_area(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::contract_out::ContractOut_Area&
ContractOut_UpdateArea::_Internal::area(const ContractOut_UpdateArea* msg) {
  return *msg->area_;
}
ContractOut_UpdateArea::ContractOut_UpdateArea()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:contract_out.ContractOut.UpdateArea)
}
ContractOut_UpdateArea::ContractOut_UpdateArea(const ContractOut_UpdateArea& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_area()) {
    area_ = new ::contract_out::ContractOut_Area(*from.area_);
  } else {
    area_ = nullptr;
  }
  relayid_ = from.relayid_;
  // @@protoc_insertion_point(copy_constructor:contract_out.ContractOut.UpdateArea)
}

void ContractOut_UpdateArea::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ContractOut_UpdateArea_contract_5fout_2eproto.base);
  ::memset(&area_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&relayid_) -
      reinterpret_cast<char*>(&area_)) + sizeof(relayid_));
}

ContractOut_UpdateArea::~ContractOut_UpdateArea() {
  // @@protoc_insertion_point(destructor:contract_out.ContractOut.UpdateArea)
  SharedDtor();
}

void ContractOut_UpdateArea::SharedDtor() {
  if (this != internal_default_instance()) delete area_;
}

void ContractOut_UpdateArea::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ContractOut_UpdateArea& ContractOut_UpdateArea::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ContractOut_UpdateArea_contract_5fout_2eproto.base);
  return *internal_default_instance();
}


void ContractOut_UpdateArea::Clear() {
// @@protoc_insertion_point(message_clear_start:contract_out.ContractOut.UpdateArea)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(area_ != nullptr);
    area_->Clear();
  }
  relayid_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ContractOut_UpdateArea::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 relayId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_relayid(&has_bits);
          relayid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .contract_out.ContractOut.Area area = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_area(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContractOut_UpdateArea::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:contract_out.ContractOut.UpdateArea)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 relayId = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_relayid(), target);
  }

  // optional .contract_out.ContractOut.Area area = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::area(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:contract_out.ContractOut.UpdateArea)
  return target;
}

size_t ContractOut_UpdateArea::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:contract_out.ContractOut.UpdateArea)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .contract_out.ContractOut.Area area = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *area_);
    }

    // optional int32 relayId = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_relayid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContractOut_UpdateArea::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:contract_out.ContractOut.UpdateArea)
  GOOGLE_DCHECK_NE(&from, this);
  const ContractOut_UpdateArea* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ContractOut_UpdateArea>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:contract_out.ContractOut.UpdateArea)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:contract_out.ContractOut.UpdateArea)
    MergeFrom(*source);
  }
}

void ContractOut_UpdateArea::MergeFrom(const ContractOut_UpdateArea& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:contract_out.ContractOut.UpdateArea)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_area()->::contract_out::ContractOut_Area::MergeFrom(from._internal_area());
    }
    if (cached_has_bits & 0x00000002u) {
      relayid_ = from.relayid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ContractOut_UpdateArea::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:contract_out.ContractOut.UpdateArea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContractOut_UpdateArea::CopyFrom(const ContractOut_UpdateArea& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:contract_out.ContractOut.UpdateArea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContractOut_UpdateArea::IsInitialized() const {
  return true;
}

void ContractOut_UpdateArea::InternalSwap(ContractOut_UpdateArea* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(area_, other->area_);
  swap(relayid_, other->relayid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ContractOut_UpdateArea::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ContractOut::InitAsDefaultInstance() {
}
class ContractOut::_Internal {
 public:
  using HasBits = decltype(std::declval<ContractOut>()._has_bits_);
  static void set_has_isack(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ContractOut::ContractOut()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:contract_out.ContractOut)
}
ContractOut::ContractOut(const ContractOut& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      updateuser_(from.updateuser_),
      updateroutingtable_(from.updateroutingtable_),
      updatearea_(from.updatearea_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  isack_ = from.isack_;
  // @@protoc_insertion_point(copy_constructor:contract_out.ContractOut)
}

void ContractOut::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ContractOut_contract_5fout_2eproto.base);
  isack_ = false;
}

ContractOut::~ContractOut() {
  // @@protoc_insertion_point(destructor:contract_out.ContractOut)
  SharedDtor();
}

void ContractOut::SharedDtor() {
}

void ContractOut::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ContractOut& ContractOut::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ContractOut_contract_5fout_2eproto.base);
  return *internal_default_instance();
}


void ContractOut::Clear() {
// @@protoc_insertion_point(message_clear_start:contract_out.ContractOut)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  updateuser_.Clear();
  updateroutingtable_.Clear();
  updatearea_.Clear();
  isack_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ContractOut::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required bool isACK = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_isack(&has_bits);
          isack_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .contract_out.ContractOut.UpdateUser updateUser = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_updateuser(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .contract_out.ContractOut.UpdateRoutingTable updateRoutingTable = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_updateroutingtable(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .contract_out.ContractOut.UpdateArea updateArea = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_updatearea(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContractOut::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:contract_out.ContractOut)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bool isACK = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_isack(), target);
  }

  // repeated .contract_out.ContractOut.UpdateUser updateUser = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_updateuser_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(2, this->_internal_updateuser(i), target, stream);
  }

  // repeated .contract_out.ContractOut.UpdateRoutingTable updateRoutingTable = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_updateroutingtable_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(3, this->_internal_updateroutingtable(i), target, stream);
  }

  // repeated .contract_out.ContractOut.UpdateArea updateArea = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_updatearea_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(4, this->_internal_updatearea(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:contract_out.ContractOut)
  return target;
}

size_t ContractOut::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:contract_out.ContractOut)
  size_t total_size = 0;

  // required bool isACK = 1;
  if (has_isack()) {
    total_size += 1 + 1;
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .contract_out.ContractOut.UpdateUser updateUser = 2;
  total_size += 1UL * this->_internal_updateuser_size();
  for (const auto& msg : this->updateuser_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .contract_out.ContractOut.UpdateRoutingTable updateRoutingTable = 3;
  total_size += 1UL * this->_internal_updateroutingtable_size();
  for (const auto& msg : this->updateroutingtable_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .contract_out.ContractOut.UpdateArea updateArea = 4;
  total_size += 1UL * this->_internal_updatearea_size();
  for (const auto& msg : this->updatearea_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContractOut::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:contract_out.ContractOut)
  GOOGLE_DCHECK_NE(&from, this);
  const ContractOut* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ContractOut>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:contract_out.ContractOut)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:contract_out.ContractOut)
    MergeFrom(*source);
  }
}

void ContractOut::MergeFrom(const ContractOut& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:contract_out.ContractOut)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  updateuser_.MergeFrom(from.updateuser_);
  updateroutingtable_.MergeFrom(from.updateroutingtable_);
  updatearea_.MergeFrom(from.updatearea_);
  if (from._internal_has_isack()) {
    _internal_set_isack(from._internal_isack());
  }
}

void ContractOut::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:contract_out.ContractOut)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContractOut::CopyFrom(const ContractOut& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:contract_out.ContractOut)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContractOut::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void ContractOut::InternalSwap(ContractOut* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  updateuser_.InternalSwap(&other->updateuser_);
  updateroutingtable_.InternalSwap(&other->updateroutingtable_);
  updatearea_.InternalSwap(&other->updatearea_);
  swap(isack_, other->isack_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ContractOut::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace contract_out
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::contract_out::ContractOut_Route* Arena::CreateMaybeMessage< ::contract_out::ContractOut_Route >(Arena* arena) {
  return Arena::CreateInternal< ::contract_out::ContractOut_Route >(arena);
}
template<> PROTOBUF_NOINLINE ::contract_out::ContractOut_Location* Arena::CreateMaybeMessage< ::contract_out::ContractOut_Location >(Arena* arena) {
  return Arena::CreateInternal< ::contract_out::ContractOut_Location >(arena);
}
template<> PROTOBUF_NOINLINE ::contract_out::ContractOut_Area* Arena::CreateMaybeMessage< ::contract_out::ContractOut_Area >(Arena* arena) {
  return Arena::CreateInternal< ::contract_out::ContractOut_Area >(arena);
}
template<> PROTOBUF_NOINLINE ::contract_out::ContractOut_UpdateUser* Arena::CreateMaybeMessage< ::contract_out::ContractOut_UpdateUser >(Arena* arena) {
  return Arena::CreateInternal< ::contract_out::ContractOut_UpdateUser >(arena);
}
template<> PROTOBUF_NOINLINE ::contract_out::ContractOut_UpdateRoutingTable* Arena::CreateMaybeMessage< ::contract_out::ContractOut_UpdateRoutingTable >(Arena* arena) {
  return Arena::CreateInternal< ::contract_out::ContractOut_UpdateRoutingTable >(arena);
}
template<> PROTOBUF_NOINLINE ::contract_out::ContractOut_UpdateArea* Arena::CreateMaybeMessage< ::contract_out::ContractOut_UpdateArea >(Arena* arena) {
  return Arena::CreateInternal< ::contract_out::ContractOut_UpdateArea >(arena);
}
template<> PROTOBUF_NOINLINE ::contract_out::ContractOut* Arena::CreateMaybeMessage< ::contract_out::ContractOut >(Arena* arena) {
  return Arena::CreateInternal< ::contract_out::ContractOut >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: contract_in.proto

#include "contract_in.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_contract_5fin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ContractIn_Load_contract_5fin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_contract_5fin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ContractIn_Location_contract_5fin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_contract_5fin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ContractIn_NotifyStatusController_contract_5fin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_contract_5fin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ContractIn_NotifyStatusRelay_contract_5fin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_contract_5fin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ContractIn_NotifyStatusUser_contract_5fin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_contract_5fin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ContractIn_Register_contract_5fin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_contract_5fin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ContractIn_Status_contract_5fin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_contract_5fin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ContractIn_Telemetry_contract_5fin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_contract_5fin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ContractIn_TelemetryByHop_contract_5fin_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_contract_5fin_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ContractIn_Unregister_contract_5fin_2eproto;
namespace contract_in {
class ContractIn_LoadDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContractIn_Load> _instance;
} _ContractIn_Load_default_instance_;
class ContractIn_LocationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContractIn_Location> _instance;
} _ContractIn_Location_default_instance_;
class ContractIn_StatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContractIn_Status> _instance;
} _ContractIn_Status_default_instance_;
class ContractIn_NotifyStatusControllerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContractIn_NotifyStatusController> _instance;
} _ContractIn_NotifyStatusController_default_instance_;
class ContractIn_NotifyStatusUserDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContractIn_NotifyStatusUser> _instance;
} _ContractIn_NotifyStatusUser_default_instance_;
class ContractIn_NotifyStatusRelayDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContractIn_NotifyStatusRelay> _instance;
} _ContractIn_NotifyStatusRelay_default_instance_;
class ContractIn_UnregisterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContractIn_Unregister> _instance;
} _ContractIn_Unregister_default_instance_;
class ContractIn_RegisterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContractIn_Register> _instance;
} _ContractIn_Register_default_instance_;
class ContractIn_TelemetryByHopDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContractIn_TelemetryByHop> _instance;
} _ContractIn_TelemetryByHop_default_instance_;
class ContractIn_TelemetryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContractIn_Telemetry> _instance;
} _ContractIn_Telemetry_default_instance_;
class ContractInDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ContractIn> _instance;
} _ContractIn_default_instance_;
}  // namespace contract_in
static void InitDefaultsscc_info_ContractIn_contract_5fin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::contract_in::_ContractIn_default_instance_;
    new (ptr) ::contract_in::ContractIn();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::contract_in::ContractIn::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_ContractIn_contract_5fin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_ContractIn_contract_5fin_2eproto}, {
      &scc_info_ContractIn_NotifyStatusController_contract_5fin_2eproto.base,
      &scc_info_ContractIn_NotifyStatusUser_contract_5fin_2eproto.base,
      &scc_info_ContractIn_NotifyStatusRelay_contract_5fin_2eproto.base,
      &scc_info_ContractIn_Unregister_contract_5fin_2eproto.base,
      &scc_info_ContractIn_Register_contract_5fin_2eproto.base,
      &scc_info_ContractIn_Telemetry_contract_5fin_2eproto.base,}};

static void InitDefaultsscc_info_ContractIn_Load_contract_5fin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::contract_in::_ContractIn_Load_default_instance_;
    new (ptr) ::contract_in::ContractIn_Load();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::contract_in::ContractIn_Load::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ContractIn_Load_contract_5fin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ContractIn_Load_contract_5fin_2eproto}, {}};

static void InitDefaultsscc_info_ContractIn_Location_contract_5fin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::contract_in::_ContractIn_Location_default_instance_;
    new (ptr) ::contract_in::ContractIn_Location();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::contract_in::ContractIn_Location::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ContractIn_Location_contract_5fin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ContractIn_Location_contract_5fin_2eproto}, {}};

static void InitDefaultsscc_info_ContractIn_NotifyStatusController_contract_5fin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::contract_in::_ContractIn_NotifyStatusController_default_instance_;
    new (ptr) ::contract_in::ContractIn_NotifyStatusController();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::contract_in::ContractIn_NotifyStatusController::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ContractIn_NotifyStatusController_contract_5fin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ContractIn_NotifyStatusController_contract_5fin_2eproto}, {
      &scc_info_ContractIn_Status_contract_5fin_2eproto.base,}};

static void InitDefaultsscc_info_ContractIn_NotifyStatusRelay_contract_5fin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::contract_in::_ContractIn_NotifyStatusRelay_default_instance_;
    new (ptr) ::contract_in::ContractIn_NotifyStatusRelay();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::contract_in::ContractIn_NotifyStatusRelay::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ContractIn_NotifyStatusRelay_contract_5fin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ContractIn_NotifyStatusRelay_contract_5fin_2eproto}, {
      &scc_info_ContractIn_Status_contract_5fin_2eproto.base,}};

static void InitDefaultsscc_info_ContractIn_NotifyStatusUser_contract_5fin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::contract_in::_ContractIn_NotifyStatusUser_default_instance_;
    new (ptr) ::contract_in::ContractIn_NotifyStatusUser();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::contract_in::ContractIn_NotifyStatusUser::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ContractIn_NotifyStatusUser_contract_5fin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ContractIn_NotifyStatusUser_contract_5fin_2eproto}, {
      &scc_info_ContractIn_Status_contract_5fin_2eproto.base,}};

static void InitDefaultsscc_info_ContractIn_Register_contract_5fin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::contract_in::_ContractIn_Register_default_instance_;
    new (ptr) ::contract_in::ContractIn_Register();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::contract_in::ContractIn_Register::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ContractIn_Register_contract_5fin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ContractIn_Register_contract_5fin_2eproto}, {
      &scc_info_ContractIn_Status_contract_5fin_2eproto.base,
      &scc_info_ContractIn_Load_contract_5fin_2eproto.base,}};

static void InitDefaultsscc_info_ContractIn_Status_contract_5fin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::contract_in::_ContractIn_Status_default_instance_;
    new (ptr) ::contract_in::ContractIn_Status();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::contract_in::ContractIn_Status::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ContractIn_Status_contract_5fin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ContractIn_Status_contract_5fin_2eproto}, {
      &scc_info_ContractIn_Location_contract_5fin_2eproto.base,}};

static void InitDefaultsscc_info_ContractIn_Telemetry_contract_5fin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::contract_in::_ContractIn_Telemetry_default_instance_;
    new (ptr) ::contract_in::ContractIn_Telemetry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::contract_in::ContractIn_Telemetry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ContractIn_Telemetry_contract_5fin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ContractIn_Telemetry_contract_5fin_2eproto}, {
      &scc_info_ContractIn_TelemetryByHop_contract_5fin_2eproto.base,}};

static void InitDefaultsscc_info_ContractIn_TelemetryByHop_contract_5fin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::contract_in::_ContractIn_TelemetryByHop_default_instance_;
    new (ptr) ::contract_in::ContractIn_TelemetryByHop();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::contract_in::ContractIn_TelemetryByHop::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ContractIn_TelemetryByHop_contract_5fin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ContractIn_TelemetryByHop_contract_5fin_2eproto}, {}};

static void InitDefaultsscc_info_ContractIn_Unregister_contract_5fin_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::contract_in::_ContractIn_Unregister_default_instance_;
    new (ptr) ::contract_in::ContractIn_Unregister();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::contract_in::ContractIn_Unregister::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ContractIn_Unregister_contract_5fin_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ContractIn_Unregister_contract_5fin_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_contract_5fin_2eproto[11];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_contract_5fin_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_contract_5fin_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_contract_5fin_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::contract_in::ContractIn_Load, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::contract_in::ContractIn_Load, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::contract_in::ContractIn_Load, waittimepacketqueue_),
  PROTOBUF_FIELD_OFFSET(::contract_in::ContractIn_Load, usernumber_),
  PROTOBUF_FIELD_OFFSET(::contract_in::ContractIn_Load, dropnumber_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::contract_in::ContractIn_Location, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::contract_in::ContractIn_Location, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::contract_in::ContractIn_Location, x_),
  PROTOBUF_FIELD_OFFSET(::contract_in::ContractIn_Location, y_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::contract_in::ContractIn_Status, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::contract_in::ContractIn_Status, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::contract_in::ContractIn_Status, location_),
  0,
  PROTOBUF_FIELD_OFFSET(::contract_in::ContractIn_NotifyStatusController, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::contract_in::ContractIn_NotifyStatusController, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::contract_in::ContractIn_NotifyStatusController, status_),
  0,
  PROTOBUF_FIELD_OFFSET(::contract_in::ContractIn_NotifyStatusUser, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::contract_in::ContractIn_NotifyStatusUser, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::contract_in::ContractIn_NotifyStatusUser, status_),
  0,
  PROTOBUF_FIELD_OFFSET(::contract_in::ContractIn_NotifyStatusRelay, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::contract_in::ContractIn_NotifyStatusRelay, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::contract_in::ContractIn_NotifyStatusRelay, status_),
  0,
  PROTOBUF_FIELD_OFFSET(::contract_in::ContractIn_Unregister, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::contract_in::ContractIn_Unregister, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::contract_in::ContractIn_Unregister, event_),
  0,
  PROTOBUF_FIELD_OFFSET(::contract_in::ContractIn_Register, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::contract_in::ContractIn_Register, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::contract_in::ContractIn_Register, status_),
  PROTOBUF_FIELD_OFFSET(::contract_in::ContractIn_Register, load_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::contract_in::ContractIn_TelemetryByHop, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::contract_in::ContractIn_TelemetryByHop, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::contract_in::ContractIn_TelemetryByHop, relayid_),
  PROTOBUF_FIELD_OFFSET(::contract_in::ContractIn_TelemetryByHop, timereceived_),
  PROTOBUF_FIELD_OFFSET(::contract_in::ContractIn_TelemetryByHop, lenqueuemac_),
  PROTOBUF_FIELD_OFFSET(::contract_in::ContractIn_TelemetryByHop, lenqueuenet_),
  PROTOBUF_FIELD_OFFSET(::contract_in::ContractIn_TelemetryByHop, packetdropmac_),
  PROTOBUF_FIELD_OFFSET(::contract_in::ContractIn_TelemetryByHop, packetdropnet_),
  PROTOBUF_FIELD_OFFSET(::contract_in::ContractIn_TelemetryByHop, rssi_),
  2,
  0,
  3,
  4,
  5,
  6,
  1,
  PROTOBUF_FIELD_OFFSET(::contract_in::ContractIn_Telemetry, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::contract_in::ContractIn_Telemetry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::contract_in::ContractIn_Telemetry, source_),
  PROTOBUF_FIELD_OFFSET(::contract_in::ContractIn_Telemetry, destination_),
  PROTOBUF_FIELD_OFFSET(::contract_in::ContractIn_Telemetry, messagetype_),
  PROTOBUF_FIELD_OFFSET(::contract_in::ContractIn_Telemetry, size_),
  PROTOBUF_FIELD_OFFSET(::contract_in::ContractIn_Telemetry, idvideo_),
  PROTOBUF_FIELD_OFFSET(::contract_in::ContractIn_Telemetry, msgtelemetrybyhop_),
  0,
  1,
  2,
  3,
  4,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::contract_in::ContractIn, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::contract_in::ContractIn, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::contract_in::ContractIn, time_),
  PROTOBUF_FIELD_OFFSET(::contract_in::ContractIn, userid_),
  PROTOBUF_FIELD_OFFSET(::contract_in::ContractIn, relayid_),
  PROTOBUF_FIELD_OFFSET(::contract_in::ContractIn, contractinpacket_),
  PROTOBUF_FIELD_OFFSET(::contract_in::ContractIn, msgnotifystatuscontroller_),
  PROTOBUF_FIELD_OFFSET(::contract_in::ContractIn, msgnotifystatususer_),
  PROTOBUF_FIELD_OFFSET(::contract_in::ContractIn, msgnotifystatusrelay_),
  PROTOBUF_FIELD_OFFSET(::contract_in::ContractIn, msgunregister_),
  PROTOBUF_FIELD_OFFSET(::contract_in::ContractIn, msgregister_),
  PROTOBUF_FIELD_OFFSET(::contract_in::ContractIn, msgtelemetry_),
  0,
  7,
  8,
  9,
  1,
  2,
  3,
  4,
  5,
  6,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::contract_in::ContractIn_Load)},
  { 11, 18, sizeof(::contract_in::ContractIn_Location)},
  { 20, 26, sizeof(::contract_in::ContractIn_Status)},
  { 27, 33, sizeof(::contract_in::ContractIn_NotifyStatusController)},
  { 34, 40, sizeof(::contract_in::ContractIn_NotifyStatusUser)},
  { 41, 47, sizeof(::contract_in::ContractIn_NotifyStatusRelay)},
  { 48, 54, sizeof(::contract_in::ContractIn_Unregister)},
  { 55, 62, sizeof(::contract_in::ContractIn_Register)},
  { 64, 76, sizeof(::contract_in::ContractIn_TelemetryByHop)},
  { 83, 94, sizeof(::contract_in::ContractIn_Telemetry)},
  { 100, 115, sizeof(::contract_in::ContractIn)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::contract_in::_ContractIn_Load_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::contract_in::_ContractIn_Location_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::contract_in::_ContractIn_Status_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::contract_in::_ContractIn_NotifyStatusController_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::contract_in::_ContractIn_NotifyStatusUser_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::contract_in::_ContractIn_NotifyStatusRelay_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::contract_in::_ContractIn_Unregister_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::contract_in::_ContractIn_Register_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::contract_in::_ContractIn_TelemetryByHop_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::contract_in::_ContractIn_Telemetry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::contract_in::_ContractIn_default_instance_),
};

const char descriptor_table_protodef_contract_5fin_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021contract_in.proto\022\013contract_in\"\204\r\n\nCon"
  "tractIn\022\014\n\004time\030\001 \001(\t\022\016\n\006userId\030\002 \001(\005\022\017\n"
  "\007relayId\030\003 \001(\005\022B\n\020contractInPacket\030\004 \002(\016"
  "2(.contract_in.ContractIn.ContractInPack"
  "et\022Q\n\031msgNotifyStatusController\030\005 \001(\0132.."
  "contract_in.ContractIn.NotifyStatusContr"
  "oller\022E\n\023msgNotifyStatusUser\030\006 \001(\0132(.con"
  "tract_in.ContractIn.NotifyStatusUser\022G\n\024"
  "msgNotifyStatusRelay\030\007 \001(\0132).contract_in"
  ".ContractIn.NotifyStatusRelay\0229\n\rmsgUnre"
  "gister\030\010 \001(\0132\".contract_in.ContractIn.Un"
  "register\0225\n\013msgRegister\030\t \001(\0132 .contract"
  "_in.ContractIn.Register\0227\n\014msgTelemetry\030"
  "\n \001(\0132!.contract_in.ContractIn.Telemetry"
  "\032K\n\004Load\022\033\n\023waitTimePacketQueue\030\001 \001(\t\022\022\n"
  "\nuserNumber\030\002 \001(\005\022\022\n\ndropNumber\030\003 \001(\005\032 \n"
  "\010Location\022\t\n\001x\030\001 \001(\t\022\t\n\001y\030\002 \001(\t\032<\n\006Statu"
  "s\0222\n\010location\030\001 \001(\0132 .contract_in.Contra"
  "ctIn.Location\032H\n\026NotifyStatusController\022"
  ".\n\006status\030\001 \001(\0132\036.contract_in.ContractIn"
  ".Status\032B\n\020NotifyStatusUser\022.\n\006status\030\001 "
  "\001(\0132\036.contract_in.ContractIn.Status\032C\n\021N"
  "otifyStatusRelay\022.\n\006status\030\001 \001(\0132\036.contr"
  "act_in.ContractIn.Status\032:\n\nUnregister\022,"
  "\n\005event\030\001 \001(\0162\035.contract_in.ContractIn.E"
  "vent\032f\n\010Register\022.\n\006status\030\001 \001(\0132\036.contr"
  "act_in.ContractIn.Status\022*\n\004load\030\002 \001(\0132\034"
  ".contract_in.ContractIn.Load\032\235\001\n\016Telemet"
  "ryByHop\022\017\n\007relayId\030\001 \001(\005\022\024\n\014timeReceived"
  "\030\002 \001(\t\022\023\n\013lenQueueMac\030\003 \001(\005\022\023\n\013lenQueueN"
  "et\030\004 \001(\005\022\025\n\rpacketDropMac\030\005 \001(\005\022\025\n\rpacke"
  "tDropNet\030\006 \001(\005\022\014\n\004rssi\030\007 \001(\t\032\247\001\n\tTelemet"
  "ry\022\016\n\006source\030\001 \001(\005\022\023\n\013destination\030\002 \001(\005\022"
  "\023\n\013messageType\030\003 \001(\005\022\014\n\004size\030\004 \001(\005\022\017\n\007id"
  "Video\030\005 \001(\005\022A\n\021msgTelemetryByHop\030\006 \003(\0132&"
  ".contract_in.ContractIn.TelemetryByHop\"\343"
  "\001\n\020ContractInPacket\022\023\n\017UNREGISTER_USER\020\001"
  "\022\027\n\023NOTIFY_STATUS_RELAY\020\002\022\022\n\016REGISTER_RE"
  "LAY\020\003\022\026\n\022NOTIFY_STATUS_USER\020\004\022\021\n\rREGISTE"
  "R_USER\020\005\022\031\n\025REFRESH_REGISTER_USER\020\006\022\034\n\030N"
  "OTIFY_STATUS_CONTROLLER\020\007\022\r\n\tPACKET_IN\020\010"
  "\022\013\n\007REQUEST\020\t\022\r\n\tTELEMETRY\020\n\"!\n\005Event\022\n\n"
  "\006FORCED\020\001\022\014\n\010REQUIRED\020\002"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_contract_5fin_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_contract_5fin_2eproto_sccs[11] = {
  &scc_info_ContractIn_contract_5fin_2eproto.base,
  &scc_info_ContractIn_Load_contract_5fin_2eproto.base,
  &scc_info_ContractIn_Location_contract_5fin_2eproto.base,
  &scc_info_ContractIn_NotifyStatusController_contract_5fin_2eproto.base,
  &scc_info_ContractIn_NotifyStatusRelay_contract_5fin_2eproto.base,
  &scc_info_ContractIn_NotifyStatusUser_contract_5fin_2eproto.base,
  &scc_info_ContractIn_Register_contract_5fin_2eproto.base,
  &scc_info_ContractIn_Status_contract_5fin_2eproto.base,
  &scc_info_ContractIn_Telemetry_contract_5fin_2eproto.base,
  &scc_info_ContractIn_TelemetryByHop_contract_5fin_2eproto.base,
  &scc_info_ContractIn_Unregister_contract_5fin_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_contract_5fin_2eproto_once;
static bool descriptor_table_contract_5fin_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_contract_5fin_2eproto = {
  &descriptor_table_contract_5fin_2eproto_initialized, descriptor_table_protodef_contract_5fin_2eproto, "contract_in.proto", 1703,
  &descriptor_table_contract_5fin_2eproto_once, descriptor_table_contract_5fin_2eproto_sccs, descriptor_table_contract_5fin_2eproto_deps, 11, 0,
  schemas, file_default_instances, TableStruct_contract_5fin_2eproto::offsets,
  file_level_metadata_contract_5fin_2eproto, 11, file_level_enum_descriptors_contract_5fin_2eproto, file_level_service_descriptors_contract_5fin_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_contract_5fin_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_contract_5fin_2eproto), true);
namespace contract_in {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ContractIn_ContractInPacket_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_contract_5fin_2eproto);
  return file_level_enum_descriptors_contract_5fin_2eproto[0];
}
bool ContractIn_ContractInPacket_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ContractIn_ContractInPacket ContractIn::UNREGISTER_USER;
constexpr ContractIn_ContractInPacket ContractIn::NOTIFY_STATUS_RELAY;
constexpr ContractIn_ContractInPacket ContractIn::REGISTER_RELAY;
constexpr ContractIn_ContractInPacket ContractIn::NOTIFY_STATUS_USER;
constexpr ContractIn_ContractInPacket ContractIn::REGISTER_USER;
constexpr ContractIn_ContractInPacket ContractIn::REFRESH_REGISTER_USER;
constexpr ContractIn_ContractInPacket ContractIn::NOTIFY_STATUS_CONTROLLER;
constexpr ContractIn_ContractInPacket ContractIn::PACKET_IN;
constexpr ContractIn_ContractInPacket ContractIn::REQUEST;
constexpr ContractIn_ContractInPacket ContractIn::TELEMETRY;
constexpr ContractIn_ContractInPacket ContractIn::ContractInPacket_MIN;
constexpr ContractIn_ContractInPacket ContractIn::ContractInPacket_MAX;
constexpr int ContractIn::ContractInPacket_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ContractIn_Event_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_contract_5fin_2eproto);
  return file_level_enum_descriptors_contract_5fin_2eproto[1];
}
bool ContractIn_Event_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ContractIn_Event ContractIn::FORCED;
constexpr ContractIn_Event ContractIn::REQUIRED;
constexpr ContractIn_Event ContractIn::Event_MIN;
constexpr ContractIn_Event ContractIn::Event_MAX;
constexpr int ContractIn::Event_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void ContractIn_Load::InitAsDefaultInstance() {
}
class ContractIn_Load::_Internal {
 public:
  using HasBits = decltype(std::declval<ContractIn_Load>()._has_bits_);
  static void set_has_waittimepacketqueue(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_usernumber(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_dropnumber(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

ContractIn_Load::ContractIn_Load()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:contract_in.ContractIn.Load)
}
ContractIn_Load::ContractIn_Load(const ContractIn_Load& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  waittimepacketqueue_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_waittimepacketqueue()) {
    waittimepacketqueue_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.waittimepacketqueue_);
  }
  ::memcpy(&usernumber_, &from.usernumber_,
    static_cast<size_t>(reinterpret_cast<char*>(&dropnumber_) -
    reinterpret_cast<char*>(&usernumber_)) + sizeof(dropnumber_));
  // @@protoc_insertion_point(copy_constructor:contract_in.ContractIn.Load)
}

void ContractIn_Load::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ContractIn_Load_contract_5fin_2eproto.base);
  waittimepacketqueue_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&usernumber_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&dropnumber_) -
      reinterpret_cast<char*>(&usernumber_)) + sizeof(dropnumber_));
}

ContractIn_Load::~ContractIn_Load() {
  // @@protoc_insertion_point(destructor:contract_in.ContractIn.Load)
  SharedDtor();
}

void ContractIn_Load::SharedDtor() {
  waittimepacketqueue_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ContractIn_Load::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ContractIn_Load& ContractIn_Load::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ContractIn_Load_contract_5fin_2eproto.base);
  return *internal_default_instance();
}


void ContractIn_Load::Clear() {
// @@protoc_insertion_point(message_clear_start:contract_in.ContractIn.Load)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    waittimepacketqueue_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&usernumber_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dropnumber_) -
        reinterpret_cast<char*>(&usernumber_)) + sizeof(dropnumber_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ContractIn_Load::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string waitTimePacketQueue = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(_internal_mutable_waittimepacketqueue(), ptr, ctx, "contract_in.ContractIn.Load.waitTimePacketQueue");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 userNumber = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_usernumber(&has_bits);
          usernumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 dropNumber = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_dropnumber(&has_bits);
          dropnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContractIn_Load::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:contract_in.ContractIn.Load)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string waitTimePacketQueue = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_waittimepacketqueue().data(), static_cast<int>(this->_internal_waittimepacketqueue().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "contract_in.ContractIn.Load.waitTimePacketQueue");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_waittimepacketqueue(), target);
  }

  // optional int32 userNumber = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_usernumber(), target);
  }

  // optional int32 dropNumber = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_dropnumber(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:contract_in.ContractIn.Load)
  return target;
}

size_t ContractIn_Load::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:contract_in.ContractIn.Load)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string waitTimePacketQueue = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_waittimepacketqueue());
    }

    // optional int32 userNumber = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_usernumber());
    }

    // optional int32 dropNumber = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_dropnumber());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContractIn_Load::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:contract_in.ContractIn.Load)
  GOOGLE_DCHECK_NE(&from, this);
  const ContractIn_Load* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ContractIn_Load>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:contract_in.ContractIn.Load)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:contract_in.ContractIn.Load)
    MergeFrom(*source);
  }
}

void ContractIn_Load::MergeFrom(const ContractIn_Load& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:contract_in.ContractIn.Load)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      waittimepacketqueue_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.waittimepacketqueue_);
    }
    if (cached_has_bits & 0x00000002u) {
      usernumber_ = from.usernumber_;
    }
    if (cached_has_bits & 0x00000004u) {
      dropnumber_ = from.dropnumber_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ContractIn_Load::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:contract_in.ContractIn.Load)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContractIn_Load::CopyFrom(const ContractIn_Load& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:contract_in.ContractIn.Load)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContractIn_Load::IsInitialized() const {
  return true;
}

void ContractIn_Load::InternalSwap(ContractIn_Load* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  waittimepacketqueue_.Swap(&other->waittimepacketqueue_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(usernumber_, other->usernumber_);
  swap(dropnumber_, other->dropnumber_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ContractIn_Load::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ContractIn_Location::InitAsDefaultInstance() {
}
class ContractIn_Location::_Internal {
 public:
  using HasBits = decltype(std::declval<ContractIn_Location>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ContractIn_Location::ContractIn_Location()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:contract_in.ContractIn.Location)
}
ContractIn_Location::ContractIn_Location(const ContractIn_Location& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  x_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_x()) {
    x_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.x_);
  }
  y_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_y()) {
    y_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.y_);
  }
  // @@protoc_insertion_point(copy_constructor:contract_in.ContractIn.Location)
}

void ContractIn_Location::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ContractIn_Location_contract_5fin_2eproto.base);
  x_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  y_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ContractIn_Location::~ContractIn_Location() {
  // @@protoc_insertion_point(destructor:contract_in.ContractIn.Location)
  SharedDtor();
}

void ContractIn_Location::SharedDtor() {
  x_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  y_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ContractIn_Location::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ContractIn_Location& ContractIn_Location::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ContractIn_Location_contract_5fin_2eproto.base);
  return *internal_default_instance();
}


void ContractIn_Location::Clear() {
// @@protoc_insertion_point(message_clear_start:contract_in.ContractIn.Location)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      x_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      y_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ContractIn_Location::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(_internal_mutable_x(), ptr, ctx, "contract_in.ContractIn.Location.x");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(_internal_mutable_y(), ptr, ctx, "contract_in.ContractIn.Location.y");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContractIn_Location::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:contract_in.ContractIn.Location)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string x = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_x().data(), static_cast<int>(this->_internal_x().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "contract_in.ContractIn.Location.x");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_x(), target);
  }

  // optional string y = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_y().data(), static_cast<int>(this->_internal_y().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "contract_in.ContractIn.Location.y");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:contract_in.ContractIn.Location)
  return target;
}

size_t ContractIn_Location::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:contract_in.ContractIn.Location)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string x = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_x());
    }

    // optional string y = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_y());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContractIn_Location::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:contract_in.ContractIn.Location)
  GOOGLE_DCHECK_NE(&from, this);
  const ContractIn_Location* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ContractIn_Location>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:contract_in.ContractIn.Location)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:contract_in.ContractIn.Location)
    MergeFrom(*source);
  }
}

void ContractIn_Location::MergeFrom(const ContractIn_Location& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:contract_in.ContractIn.Location)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      x_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.x_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      y_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.y_);
    }
  }
}

void ContractIn_Location::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:contract_in.ContractIn.Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContractIn_Location::CopyFrom(const ContractIn_Location& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:contract_in.ContractIn.Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContractIn_Location::IsInitialized() const {
  return true;
}

void ContractIn_Location::InternalSwap(ContractIn_Location* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  x_.Swap(&other->x_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  y_.Swap(&other->y_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata ContractIn_Location::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ContractIn_Status::InitAsDefaultInstance() {
  ::contract_in::_ContractIn_Status_default_instance_._instance.get_mutable()->location_ = const_cast< ::contract_in::ContractIn_Location*>(
      ::contract_in::ContractIn_Location::internal_default_instance());
}
class ContractIn_Status::_Internal {
 public:
  using HasBits = decltype(std::declval<ContractIn_Status>()._has_bits_);
  static const ::contract_in::ContractIn_Location& location(const ContractIn_Status* msg);
  static void set_has_location(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::contract_in::ContractIn_Location&
ContractIn_Status::_Internal::location(const ContractIn_Status* msg) {
  return *msg->location_;
}
ContractIn_Status::ContractIn_Status()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:contract_in.ContractIn.Status)
}
ContractIn_Status::ContractIn_Status(const ContractIn_Status& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_location()) {
    location_ = new ::contract_in::ContractIn_Location(*from.location_);
  } else {
    location_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:contract_in.ContractIn.Status)
}

void ContractIn_Status::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ContractIn_Status_contract_5fin_2eproto.base);
  location_ = nullptr;
}

ContractIn_Status::~ContractIn_Status() {
  // @@protoc_insertion_point(destructor:contract_in.ContractIn.Status)
  SharedDtor();
}

void ContractIn_Status::SharedDtor() {
  if (this != internal_default_instance()) delete location_;
}

void ContractIn_Status::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ContractIn_Status& ContractIn_Status::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ContractIn_Status_contract_5fin_2eproto.base);
  return *internal_default_instance();
}


void ContractIn_Status::Clear() {
// @@protoc_insertion_point(message_clear_start:contract_in.ContractIn.Status)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(location_ != nullptr);
    location_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ContractIn_Status::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .contract_in.ContractIn.Location location = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContractIn_Status::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:contract_in.ContractIn.Status)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .contract_in.ContractIn.Location location = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::location(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:contract_in.ContractIn.Status)
  return target;
}

size_t ContractIn_Status::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:contract_in.ContractIn.Status)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .contract_in.ContractIn.Location location = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *location_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContractIn_Status::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:contract_in.ContractIn.Status)
  GOOGLE_DCHECK_NE(&from, this);
  const ContractIn_Status* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ContractIn_Status>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:contract_in.ContractIn.Status)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:contract_in.ContractIn.Status)
    MergeFrom(*source);
  }
}

void ContractIn_Status::MergeFrom(const ContractIn_Status& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:contract_in.ContractIn.Status)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_location()) {
    _internal_mutable_location()->::contract_in::ContractIn_Location::MergeFrom(from._internal_location());
  }
}

void ContractIn_Status::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:contract_in.ContractIn.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContractIn_Status::CopyFrom(const ContractIn_Status& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:contract_in.ContractIn.Status)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContractIn_Status::IsInitialized() const {
  return true;
}

void ContractIn_Status::InternalSwap(ContractIn_Status* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(location_, other->location_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ContractIn_Status::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ContractIn_NotifyStatusController::InitAsDefaultInstance() {
  ::contract_in::_ContractIn_NotifyStatusController_default_instance_._instance.get_mutable()->status_ = const_cast< ::contract_in::ContractIn_Status*>(
      ::contract_in::ContractIn_Status::internal_default_instance());
}
class ContractIn_NotifyStatusController::_Internal {
 public:
  using HasBits = decltype(std::declval<ContractIn_NotifyStatusController>()._has_bits_);
  static const ::contract_in::ContractIn_Status& status(const ContractIn_NotifyStatusController* msg);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::contract_in::ContractIn_Status&
ContractIn_NotifyStatusController::_Internal::status(const ContractIn_NotifyStatusController* msg) {
  return *msg->status_;
}
ContractIn_NotifyStatusController::ContractIn_NotifyStatusController()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:contract_in.ContractIn.NotifyStatusController)
}
ContractIn_NotifyStatusController::ContractIn_NotifyStatusController(const ContractIn_NotifyStatusController& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::contract_in::ContractIn_Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:contract_in.ContractIn.NotifyStatusController)
}

void ContractIn_NotifyStatusController::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ContractIn_NotifyStatusController_contract_5fin_2eproto.base);
  status_ = nullptr;
}

ContractIn_NotifyStatusController::~ContractIn_NotifyStatusController() {
  // @@protoc_insertion_point(destructor:contract_in.ContractIn.NotifyStatusController)
  SharedDtor();
}

void ContractIn_NotifyStatusController::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void ContractIn_NotifyStatusController::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ContractIn_NotifyStatusController& ContractIn_NotifyStatusController::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ContractIn_NotifyStatusController_contract_5fin_2eproto.base);
  return *internal_default_instance();
}


void ContractIn_NotifyStatusController::Clear() {
// @@protoc_insertion_point(message_clear_start:contract_in.ContractIn.NotifyStatusController)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(status_ != nullptr);
    status_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ContractIn_NotifyStatusController::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .contract_in.ContractIn.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContractIn_NotifyStatusController::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:contract_in.ContractIn.NotifyStatusController)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .contract_in.ContractIn.Status status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:contract_in.ContractIn.NotifyStatusController)
  return target;
}

size_t ContractIn_NotifyStatusController::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:contract_in.ContractIn.NotifyStatusController)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .contract_in.ContractIn.Status status = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContractIn_NotifyStatusController::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:contract_in.ContractIn.NotifyStatusController)
  GOOGLE_DCHECK_NE(&from, this);
  const ContractIn_NotifyStatusController* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ContractIn_NotifyStatusController>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:contract_in.ContractIn.NotifyStatusController)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:contract_in.ContractIn.NotifyStatusController)
    MergeFrom(*source);
  }
}

void ContractIn_NotifyStatusController::MergeFrom(const ContractIn_NotifyStatusController& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:contract_in.ContractIn.NotifyStatusController)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _internal_mutable_status()->::contract_in::ContractIn_Status::MergeFrom(from._internal_status());
  }
}

void ContractIn_NotifyStatusController::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:contract_in.ContractIn.NotifyStatusController)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContractIn_NotifyStatusController::CopyFrom(const ContractIn_NotifyStatusController& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:contract_in.ContractIn.NotifyStatusController)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContractIn_NotifyStatusController::IsInitialized() const {
  return true;
}

void ContractIn_NotifyStatusController::InternalSwap(ContractIn_NotifyStatusController* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ContractIn_NotifyStatusController::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ContractIn_NotifyStatusUser::InitAsDefaultInstance() {
  ::contract_in::_ContractIn_NotifyStatusUser_default_instance_._instance.get_mutable()->status_ = const_cast< ::contract_in::ContractIn_Status*>(
      ::contract_in::ContractIn_Status::internal_default_instance());
}
class ContractIn_NotifyStatusUser::_Internal {
 public:
  using HasBits = decltype(std::declval<ContractIn_NotifyStatusUser>()._has_bits_);
  static const ::contract_in::ContractIn_Status& status(const ContractIn_NotifyStatusUser* msg);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::contract_in::ContractIn_Status&
ContractIn_NotifyStatusUser::_Internal::status(const ContractIn_NotifyStatusUser* msg) {
  return *msg->status_;
}
ContractIn_NotifyStatusUser::ContractIn_NotifyStatusUser()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:contract_in.ContractIn.NotifyStatusUser)
}
ContractIn_NotifyStatusUser::ContractIn_NotifyStatusUser(const ContractIn_NotifyStatusUser& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::contract_in::ContractIn_Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:contract_in.ContractIn.NotifyStatusUser)
}

void ContractIn_NotifyStatusUser::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ContractIn_NotifyStatusUser_contract_5fin_2eproto.base);
  status_ = nullptr;
}

ContractIn_NotifyStatusUser::~ContractIn_NotifyStatusUser() {
  // @@protoc_insertion_point(destructor:contract_in.ContractIn.NotifyStatusUser)
  SharedDtor();
}

void ContractIn_NotifyStatusUser::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void ContractIn_NotifyStatusUser::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ContractIn_NotifyStatusUser& ContractIn_NotifyStatusUser::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ContractIn_NotifyStatusUser_contract_5fin_2eproto.base);
  return *internal_default_instance();
}


void ContractIn_NotifyStatusUser::Clear() {
// @@protoc_insertion_point(message_clear_start:contract_in.ContractIn.NotifyStatusUser)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(status_ != nullptr);
    status_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ContractIn_NotifyStatusUser::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .contract_in.ContractIn.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContractIn_NotifyStatusUser::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:contract_in.ContractIn.NotifyStatusUser)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .contract_in.ContractIn.Status status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:contract_in.ContractIn.NotifyStatusUser)
  return target;
}

size_t ContractIn_NotifyStatusUser::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:contract_in.ContractIn.NotifyStatusUser)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .contract_in.ContractIn.Status status = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContractIn_NotifyStatusUser::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:contract_in.ContractIn.NotifyStatusUser)
  GOOGLE_DCHECK_NE(&from, this);
  const ContractIn_NotifyStatusUser* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ContractIn_NotifyStatusUser>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:contract_in.ContractIn.NotifyStatusUser)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:contract_in.ContractIn.NotifyStatusUser)
    MergeFrom(*source);
  }
}

void ContractIn_NotifyStatusUser::MergeFrom(const ContractIn_NotifyStatusUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:contract_in.ContractIn.NotifyStatusUser)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _internal_mutable_status()->::contract_in::ContractIn_Status::MergeFrom(from._internal_status());
  }
}

void ContractIn_NotifyStatusUser::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:contract_in.ContractIn.NotifyStatusUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContractIn_NotifyStatusUser::CopyFrom(const ContractIn_NotifyStatusUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:contract_in.ContractIn.NotifyStatusUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContractIn_NotifyStatusUser::IsInitialized() const {
  return true;
}

void ContractIn_NotifyStatusUser::InternalSwap(ContractIn_NotifyStatusUser* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ContractIn_NotifyStatusUser::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ContractIn_NotifyStatusRelay::InitAsDefaultInstance() {
  ::contract_in::_ContractIn_NotifyStatusRelay_default_instance_._instance.get_mutable()->status_ = const_cast< ::contract_in::ContractIn_Status*>(
      ::contract_in::ContractIn_Status::internal_default_instance());
}
class ContractIn_NotifyStatusRelay::_Internal {
 public:
  using HasBits = decltype(std::declval<ContractIn_NotifyStatusRelay>()._has_bits_);
  static const ::contract_in::ContractIn_Status& status(const ContractIn_NotifyStatusRelay* msg);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::contract_in::ContractIn_Status&
ContractIn_NotifyStatusRelay::_Internal::status(const ContractIn_NotifyStatusRelay* msg) {
  return *msg->status_;
}
ContractIn_NotifyStatusRelay::ContractIn_NotifyStatusRelay()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:contract_in.ContractIn.NotifyStatusRelay)
}
ContractIn_NotifyStatusRelay::ContractIn_NotifyStatusRelay(const ContractIn_NotifyStatusRelay& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::contract_in::ContractIn_Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:contract_in.ContractIn.NotifyStatusRelay)
}

void ContractIn_NotifyStatusRelay::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ContractIn_NotifyStatusRelay_contract_5fin_2eproto.base);
  status_ = nullptr;
}

ContractIn_NotifyStatusRelay::~ContractIn_NotifyStatusRelay() {
  // @@protoc_insertion_point(destructor:contract_in.ContractIn.NotifyStatusRelay)
  SharedDtor();
}

void ContractIn_NotifyStatusRelay::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void ContractIn_NotifyStatusRelay::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ContractIn_NotifyStatusRelay& ContractIn_NotifyStatusRelay::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ContractIn_NotifyStatusRelay_contract_5fin_2eproto.base);
  return *internal_default_instance();
}


void ContractIn_NotifyStatusRelay::Clear() {
// @@protoc_insertion_point(message_clear_start:contract_in.ContractIn.NotifyStatusRelay)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(status_ != nullptr);
    status_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ContractIn_NotifyStatusRelay::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .contract_in.ContractIn.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContractIn_NotifyStatusRelay::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:contract_in.ContractIn.NotifyStatusRelay)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .contract_in.ContractIn.Status status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:contract_in.ContractIn.NotifyStatusRelay)
  return target;
}

size_t ContractIn_NotifyStatusRelay::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:contract_in.ContractIn.NotifyStatusRelay)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .contract_in.ContractIn.Status status = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContractIn_NotifyStatusRelay::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:contract_in.ContractIn.NotifyStatusRelay)
  GOOGLE_DCHECK_NE(&from, this);
  const ContractIn_NotifyStatusRelay* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ContractIn_NotifyStatusRelay>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:contract_in.ContractIn.NotifyStatusRelay)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:contract_in.ContractIn.NotifyStatusRelay)
    MergeFrom(*source);
  }
}

void ContractIn_NotifyStatusRelay::MergeFrom(const ContractIn_NotifyStatusRelay& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:contract_in.ContractIn.NotifyStatusRelay)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _internal_mutable_status()->::contract_in::ContractIn_Status::MergeFrom(from._internal_status());
  }
}

void ContractIn_NotifyStatusRelay::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:contract_in.ContractIn.NotifyStatusRelay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContractIn_NotifyStatusRelay::CopyFrom(const ContractIn_NotifyStatusRelay& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:contract_in.ContractIn.NotifyStatusRelay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContractIn_NotifyStatusRelay::IsInitialized() const {
  return true;
}

void ContractIn_NotifyStatusRelay::InternalSwap(ContractIn_NotifyStatusRelay* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ContractIn_NotifyStatusRelay::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ContractIn_Unregister::InitAsDefaultInstance() {
}
class ContractIn_Unregister::_Internal {
 public:
  using HasBits = decltype(std::declval<ContractIn_Unregister>()._has_bits_);
  static void set_has_event(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

ContractIn_Unregister::ContractIn_Unregister()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:contract_in.ContractIn.Unregister)
}
ContractIn_Unregister::ContractIn_Unregister(const ContractIn_Unregister& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  event_ = from.event_;
  // @@protoc_insertion_point(copy_constructor:contract_in.ContractIn.Unregister)
}

void ContractIn_Unregister::SharedCtor() {
  event_ = 1;
}

ContractIn_Unregister::~ContractIn_Unregister() {
  // @@protoc_insertion_point(destructor:contract_in.ContractIn.Unregister)
  SharedDtor();
}

void ContractIn_Unregister::SharedDtor() {
}

void ContractIn_Unregister::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ContractIn_Unregister& ContractIn_Unregister::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ContractIn_Unregister_contract_5fin_2eproto.base);
  return *internal_default_instance();
}


void ContractIn_Unregister::Clear() {
// @@protoc_insertion_point(message_clear_start:contract_in.ContractIn.Unregister)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  event_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ContractIn_Unregister::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .contract_in.ContractIn.Event event = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::contract_in::ContractIn_Event_IsValid(val))) {
            _internal_set_event(static_cast<::contract_in::ContractIn_Event>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContractIn_Unregister::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:contract_in.ContractIn.Unregister)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .contract_in.ContractIn.Event event = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:contract_in.ContractIn.Unregister)
  return target;
}

size_t ContractIn_Unregister::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:contract_in.ContractIn.Unregister)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .contract_in.ContractIn.Event event = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContractIn_Unregister::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:contract_in.ContractIn.Unregister)
  GOOGLE_DCHECK_NE(&from, this);
  const ContractIn_Unregister* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ContractIn_Unregister>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:contract_in.ContractIn.Unregister)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:contract_in.ContractIn.Unregister)
    MergeFrom(*source);
  }
}

void ContractIn_Unregister::MergeFrom(const ContractIn_Unregister& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:contract_in.ContractIn.Unregister)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_event()) {
    _internal_set_event(from._internal_event());
  }
}

void ContractIn_Unregister::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:contract_in.ContractIn.Unregister)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContractIn_Unregister::CopyFrom(const ContractIn_Unregister& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:contract_in.ContractIn.Unregister)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContractIn_Unregister::IsInitialized() const {
  return true;
}

void ContractIn_Unregister::InternalSwap(ContractIn_Unregister* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(event_, other->event_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ContractIn_Unregister::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ContractIn_Register::InitAsDefaultInstance() {
  ::contract_in::_ContractIn_Register_default_instance_._instance.get_mutable()->status_ = const_cast< ::contract_in::ContractIn_Status*>(
      ::contract_in::ContractIn_Status::internal_default_instance());
  ::contract_in::_ContractIn_Register_default_instance_._instance.get_mutable()->load_ = const_cast< ::contract_in::ContractIn_Load*>(
      ::contract_in::ContractIn_Load::internal_default_instance());
}
class ContractIn_Register::_Internal {
 public:
  using HasBits = decltype(std::declval<ContractIn_Register>()._has_bits_);
  static const ::contract_in::ContractIn_Status& status(const ContractIn_Register* msg);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::contract_in::ContractIn_Load& load(const ContractIn_Register* msg);
  static void set_has_load(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::contract_in::ContractIn_Status&
ContractIn_Register::_Internal::status(const ContractIn_Register* msg) {
  return *msg->status_;
}
const ::contract_in::ContractIn_Load&
ContractIn_Register::_Internal::load(const ContractIn_Register* msg) {
  return *msg->load_;
}
ContractIn_Register::ContractIn_Register()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:contract_in.ContractIn.Register)
}
ContractIn_Register::ContractIn_Register(const ContractIn_Register& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::contract_in::ContractIn_Status(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_load()) {
    load_ = new ::contract_in::ContractIn_Load(*from.load_);
  } else {
    load_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:contract_in.ContractIn.Register)
}

void ContractIn_Register::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ContractIn_Register_contract_5fin_2eproto.base);
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&load_) -
      reinterpret_cast<char*>(&status_)) + sizeof(load_));
}

ContractIn_Register::~ContractIn_Register() {
  // @@protoc_insertion_point(destructor:contract_in.ContractIn.Register)
  SharedDtor();
}

void ContractIn_Register::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete load_;
}

void ContractIn_Register::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ContractIn_Register& ContractIn_Register::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ContractIn_Register_contract_5fin_2eproto.base);
  return *internal_default_instance();
}


void ContractIn_Register::Clear() {
// @@protoc_insertion_point(message_clear_start:contract_in.ContractIn.Register)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(status_ != nullptr);
      status_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(load_ != nullptr);
      load_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ContractIn_Register::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional .contract_in.ContractIn.Status status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .contract_in.ContractIn.Load load = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_load(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContractIn_Register::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:contract_in.ContractIn.Register)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .contract_in.ContractIn.Status status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::status(this), target, stream);
  }

  // optional .contract_in.ContractIn.Load load = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, _Internal::load(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:contract_in.ContractIn.Register)
  return target;
}

size_t ContractIn_Register::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:contract_in.ContractIn.Register)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .contract_in.ContractIn.Status status = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *status_);
    }

    // optional .contract_in.ContractIn.Load load = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *load_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContractIn_Register::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:contract_in.ContractIn.Register)
  GOOGLE_DCHECK_NE(&from, this);
  const ContractIn_Register* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ContractIn_Register>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:contract_in.ContractIn.Register)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:contract_in.ContractIn.Register)
    MergeFrom(*source);
  }
}

void ContractIn_Register::MergeFrom(const ContractIn_Register& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:contract_in.ContractIn.Register)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_status()->::contract_in::ContractIn_Status::MergeFrom(from._internal_status());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_load()->::contract_in::ContractIn_Load::MergeFrom(from._internal_load());
    }
  }
}

void ContractIn_Register::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:contract_in.ContractIn.Register)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContractIn_Register::CopyFrom(const ContractIn_Register& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:contract_in.ContractIn.Register)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContractIn_Register::IsInitialized() const {
  return true;
}

void ContractIn_Register::InternalSwap(ContractIn_Register* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(status_, other->status_);
  swap(load_, other->load_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ContractIn_Register::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ContractIn_TelemetryByHop::InitAsDefaultInstance() {
}
class ContractIn_TelemetryByHop::_Internal {
 public:
  using HasBits = decltype(std::declval<ContractIn_TelemetryByHop>()._has_bits_);
  static void set_has_relayid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_timereceived(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_lenqueuemac(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_lenqueuenet(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_packetdropmac(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_packetdropnet(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_rssi(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ContractIn_TelemetryByHop::ContractIn_TelemetryByHop()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:contract_in.ContractIn.TelemetryByHop)
}
ContractIn_TelemetryByHop::ContractIn_TelemetryByHop(const ContractIn_TelemetryByHop& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  timereceived_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_timereceived()) {
    timereceived_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.timereceived_);
  }
  rssi_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_rssi()) {
    rssi_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.rssi_);
  }
  ::memcpy(&relayid_, &from.relayid_,
    static_cast<size_t>(reinterpret_cast<char*>(&packetdropnet_) -
    reinterpret_cast<char*>(&relayid_)) + sizeof(packetdropnet_));
  // @@protoc_insertion_point(copy_constructor:contract_in.ContractIn.TelemetryByHop)
}

void ContractIn_TelemetryByHop::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ContractIn_TelemetryByHop_contract_5fin_2eproto.base);
  timereceived_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rssi_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&relayid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&packetdropnet_) -
      reinterpret_cast<char*>(&relayid_)) + sizeof(packetdropnet_));
}

ContractIn_TelemetryByHop::~ContractIn_TelemetryByHop() {
  // @@protoc_insertion_point(destructor:contract_in.ContractIn.TelemetryByHop)
  SharedDtor();
}

void ContractIn_TelemetryByHop::SharedDtor() {
  timereceived_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  rssi_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ContractIn_TelemetryByHop::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ContractIn_TelemetryByHop& ContractIn_TelemetryByHop::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ContractIn_TelemetryByHop_contract_5fin_2eproto.base);
  return *internal_default_instance();
}


void ContractIn_TelemetryByHop::Clear() {
// @@protoc_insertion_point(message_clear_start:contract_in.ContractIn.TelemetryByHop)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      timereceived_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      rssi_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&relayid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&packetdropnet_) -
        reinterpret_cast<char*>(&relayid_)) + sizeof(packetdropnet_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ContractIn_TelemetryByHop::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 relayId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_relayid(&has_bits);
          relayid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string timeReceived = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(_internal_mutable_timereceived(), ptr, ctx, "contract_in.ContractIn.TelemetryByHop.timeReceived");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 lenQueueMac = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_lenqueuemac(&has_bits);
          lenqueuemac_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 lenQueueNet = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_lenqueuenet(&has_bits);
          lenqueuenet_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 packetDropMac = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_packetdropmac(&has_bits);
          packetdropmac_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 packetDropNet = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_packetdropnet(&has_bits);
          packetdropnet_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string rssi = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(_internal_mutable_rssi(), ptr, ctx, "contract_in.ContractIn.TelemetryByHop.rssi");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContractIn_TelemetryByHop::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:contract_in.ContractIn.TelemetryByHop)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 relayId = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_relayid(), target);
  }

  // optional string timeReceived = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_timereceived().data(), static_cast<int>(this->_internal_timereceived().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "contract_in.ContractIn.TelemetryByHop.timeReceived");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_timereceived(), target);
  }

  // optional int32 lenQueueMac = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_lenqueuemac(), target);
  }

  // optional int32 lenQueueNet = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_lenqueuenet(), target);
  }

  // optional int32 packetDropMac = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_packetdropmac(), target);
  }

  // optional int32 packetDropNet = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_packetdropnet(), target);
  }

  // optional string rssi = 7;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_rssi().data(), static_cast<int>(this->_internal_rssi().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "contract_in.ContractIn.TelemetryByHop.rssi");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_rssi(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:contract_in.ContractIn.TelemetryByHop)
  return target;
}

size_t ContractIn_TelemetryByHop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:contract_in.ContractIn.TelemetryByHop)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional string timeReceived = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_timereceived());
    }

    // optional string rssi = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_rssi());
    }

    // optional int32 relayId = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_relayid());
    }

    // optional int32 lenQueueMac = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_lenqueuemac());
    }

    // optional int32 lenQueueNet = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_lenqueuenet());
    }

    // optional int32 packetDropMac = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_packetdropmac());
    }

    // optional int32 packetDropNet = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_packetdropnet());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContractIn_TelemetryByHop::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:contract_in.ContractIn.TelemetryByHop)
  GOOGLE_DCHECK_NE(&from, this);
  const ContractIn_TelemetryByHop* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ContractIn_TelemetryByHop>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:contract_in.ContractIn.TelemetryByHop)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:contract_in.ContractIn.TelemetryByHop)
    MergeFrom(*source);
  }
}

void ContractIn_TelemetryByHop::MergeFrom(const ContractIn_TelemetryByHop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:contract_in.ContractIn.TelemetryByHop)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      timereceived_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.timereceived_);
    }
    if (cached_has_bits & 0x00000002u) {
      _has_bits_[0] |= 0x00000002u;
      rssi_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.rssi_);
    }
    if (cached_has_bits & 0x00000004u) {
      relayid_ = from.relayid_;
    }
    if (cached_has_bits & 0x00000008u) {
      lenqueuemac_ = from.lenqueuemac_;
    }
    if (cached_has_bits & 0x00000010u) {
      lenqueuenet_ = from.lenqueuenet_;
    }
    if (cached_has_bits & 0x00000020u) {
      packetdropmac_ = from.packetdropmac_;
    }
    if (cached_has_bits & 0x00000040u) {
      packetdropnet_ = from.packetdropnet_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ContractIn_TelemetryByHop::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:contract_in.ContractIn.TelemetryByHop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContractIn_TelemetryByHop::CopyFrom(const ContractIn_TelemetryByHop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:contract_in.ContractIn.TelemetryByHop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContractIn_TelemetryByHop::IsInitialized() const {
  return true;
}

void ContractIn_TelemetryByHop::InternalSwap(ContractIn_TelemetryByHop* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  timereceived_.Swap(&other->timereceived_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  rssi_.Swap(&other->rssi_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(relayid_, other->relayid_);
  swap(lenqueuemac_, other->lenqueuemac_);
  swap(lenqueuenet_, other->lenqueuenet_);
  swap(packetdropmac_, other->packetdropmac_);
  swap(packetdropnet_, other->packetdropnet_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ContractIn_TelemetryByHop::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ContractIn_Telemetry::InitAsDefaultInstance() {
}
class ContractIn_Telemetry::_Internal {
 public:
  using HasBits = decltype(std::declval<ContractIn_Telemetry>()._has_bits_);
  static void set_has_source(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_destination(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_messagetype(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_size(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_idvideo(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

ContractIn_Telemetry::ContractIn_Telemetry()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:contract_in.ContractIn.Telemetry)
}
ContractIn_Telemetry::ContractIn_Telemetry(const ContractIn_Telemetry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      msgtelemetrybyhop_(from.msgtelemetrybyhop_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&source_, &from.source_,
    static_cast<size_t>(reinterpret_cast<char*>(&idvideo_) -
    reinterpret_cast<char*>(&source_)) + sizeof(idvideo_));
  // @@protoc_insertion_point(copy_constructor:contract_in.ContractIn.Telemetry)
}

void ContractIn_Telemetry::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ContractIn_Telemetry_contract_5fin_2eproto.base);
  ::memset(&source_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&idvideo_) -
      reinterpret_cast<char*>(&source_)) + sizeof(idvideo_));
}

ContractIn_Telemetry::~ContractIn_Telemetry() {
  // @@protoc_insertion_point(destructor:contract_in.ContractIn.Telemetry)
  SharedDtor();
}

void ContractIn_Telemetry::SharedDtor() {
}

void ContractIn_Telemetry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ContractIn_Telemetry& ContractIn_Telemetry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ContractIn_Telemetry_contract_5fin_2eproto.base);
  return *internal_default_instance();
}


void ContractIn_Telemetry::Clear() {
// @@protoc_insertion_point(message_clear_start:contract_in.ContractIn.Telemetry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msgtelemetrybyhop_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&source_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&idvideo_) -
        reinterpret_cast<char*>(&source_)) + sizeof(idvideo_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ContractIn_Telemetry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional int32 source = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_source(&has_bits);
          source_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 destination = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_destination(&has_bits);
          destination_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 messageType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_messagetype(&has_bits);
          messagetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 size = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_size(&has_bits);
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 idVideo = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_idvideo(&has_bits);
          idvideo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .contract_in.ContractIn.TelemetryByHop msgTelemetryByHop = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_msgtelemetrybyhop(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContractIn_Telemetry::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:contract_in.ContractIn.Telemetry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 source = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_source(), target);
  }

  // optional int32 destination = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_destination(), target);
  }

  // optional int32 messageType = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_messagetype(), target);
  }

  // optional int32 size = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_size(), target);
  }

  // optional int32 idVideo = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_idvideo(), target);
  }

  // repeated .contract_in.ContractIn.TelemetryByHop msgTelemetryByHop = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_msgtelemetrybyhop_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(6, this->_internal_msgtelemetrybyhop(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:contract_in.ContractIn.Telemetry)
  return target;
}

size_t ContractIn_Telemetry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:contract_in.ContractIn.Telemetry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .contract_in.ContractIn.TelemetryByHop msgTelemetryByHop = 6;
  total_size += 1UL * this->_internal_msgtelemetrybyhop_size();
  for (const auto& msg : this->msgtelemetrybyhop_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional int32 source = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_source());
    }

    // optional int32 destination = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_destination());
    }

    // optional int32 messageType = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_messagetype());
    }

    // optional int32 size = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_size());
    }

    // optional int32 idVideo = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_idvideo());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContractIn_Telemetry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:contract_in.ContractIn.Telemetry)
  GOOGLE_DCHECK_NE(&from, this);
  const ContractIn_Telemetry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ContractIn_Telemetry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:contract_in.ContractIn.Telemetry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:contract_in.ContractIn.Telemetry)
    MergeFrom(*source);
  }
}

void ContractIn_Telemetry::MergeFrom(const ContractIn_Telemetry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:contract_in.ContractIn.Telemetry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  msgtelemetrybyhop_.MergeFrom(from.msgtelemetrybyhop_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      source_ = from.source_;
    }
    if (cached_has_bits & 0x00000002u) {
      destination_ = from.destination_;
    }
    if (cached_has_bits & 0x00000004u) {
      messagetype_ = from.messagetype_;
    }
    if (cached_has_bits & 0x00000008u) {
      size_ = from.size_;
    }
    if (cached_has_bits & 0x00000010u) {
      idvideo_ = from.idvideo_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ContractIn_Telemetry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:contract_in.ContractIn.Telemetry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContractIn_Telemetry::CopyFrom(const ContractIn_Telemetry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:contract_in.ContractIn.Telemetry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContractIn_Telemetry::IsInitialized() const {
  return true;
}

void ContractIn_Telemetry::InternalSwap(ContractIn_Telemetry* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  msgtelemetrybyhop_.InternalSwap(&other->msgtelemetrybyhop_);
  swap(source_, other->source_);
  swap(destination_, other->destination_);
  swap(messagetype_, other->messagetype_);
  swap(size_, other->size_);
  swap(idvideo_, other->idvideo_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ContractIn_Telemetry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ContractIn::InitAsDefaultInstance() {
  ::contract_in::_ContractIn_default_instance_._instance.get_mutable()->msgnotifystatuscontroller_ = const_cast< ::contract_in::ContractIn_NotifyStatusController*>(
      ::contract_in::ContractIn_NotifyStatusController::internal_default_instance());
  ::contract_in::_ContractIn_default_instance_._instance.get_mutable()->msgnotifystatususer_ = const_cast< ::contract_in::ContractIn_NotifyStatusUser*>(
      ::contract_in::ContractIn_NotifyStatusUser::internal_default_instance());
  ::contract_in::_ContractIn_default_instance_._instance.get_mutable()->msgnotifystatusrelay_ = const_cast< ::contract_in::ContractIn_NotifyStatusRelay*>(
      ::contract_in::ContractIn_NotifyStatusRelay::internal_default_instance());
  ::contract_in::_ContractIn_default_instance_._instance.get_mutable()->msgunregister_ = const_cast< ::contract_in::ContractIn_Unregister*>(
      ::contract_in::ContractIn_Unregister::internal_default_instance());
  ::contract_in::_ContractIn_default_instance_._instance.get_mutable()->msgregister_ = const_cast< ::contract_in::ContractIn_Register*>(
      ::contract_in::ContractIn_Register::internal_default_instance());
  ::contract_in::_ContractIn_default_instance_._instance.get_mutable()->msgtelemetry_ = const_cast< ::contract_in::ContractIn_Telemetry*>(
      ::contract_in::ContractIn_Telemetry::internal_default_instance());
}
class ContractIn::_Internal {
 public:
  using HasBits = decltype(std::declval<ContractIn>()._has_bits_);
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_userid(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_relayid(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_contractinpacket(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::contract_in::ContractIn_NotifyStatusController& msgnotifystatuscontroller(const ContractIn* msg);
  static void set_has_msgnotifystatuscontroller(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::contract_in::ContractIn_NotifyStatusUser& msgnotifystatususer(const ContractIn* msg);
  static void set_has_msgnotifystatususer(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::contract_in::ContractIn_NotifyStatusRelay& msgnotifystatusrelay(const ContractIn* msg);
  static void set_has_msgnotifystatusrelay(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::contract_in::ContractIn_Unregister& msgunregister(const ContractIn* msg);
  static void set_has_msgunregister(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::contract_in::ContractIn_Register& msgregister(const ContractIn* msg);
  static void set_has_msgregister(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::contract_in::ContractIn_Telemetry& msgtelemetry(const ContractIn* msg);
  static void set_has_msgtelemetry(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::contract_in::ContractIn_NotifyStatusController&
ContractIn::_Internal::msgnotifystatuscontroller(const ContractIn* msg) {
  return *msg->msgnotifystatuscontroller_;
}
const ::contract_in::ContractIn_NotifyStatusUser&
ContractIn::_Internal::msgnotifystatususer(const ContractIn* msg) {
  return *msg->msgnotifystatususer_;
}
const ::contract_in::ContractIn_NotifyStatusRelay&
ContractIn::_Internal::msgnotifystatusrelay(const ContractIn* msg) {
  return *msg->msgnotifystatusrelay_;
}
const ::contract_in::ContractIn_Unregister&
ContractIn::_Internal::msgunregister(const ContractIn* msg) {
  return *msg->msgunregister_;
}
const ::contract_in::ContractIn_Register&
ContractIn::_Internal::msgregister(const ContractIn* msg) {
  return *msg->msgregister_;
}
const ::contract_in::ContractIn_Telemetry&
ContractIn::_Internal::msgtelemetry(const ContractIn* msg) {
  return *msg->msgtelemetry_;
}
ContractIn::ContractIn()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:contract_in.ContractIn)
}
ContractIn::ContractIn(const ContractIn& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_time()) {
    time_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.time_);
  }
  if (from._internal_has_msgnotifystatuscontroller()) {
    msgnotifystatuscontroller_ = new ::contract_in::ContractIn_NotifyStatusController(*from.msgnotifystatuscontroller_);
  } else {
    msgnotifystatuscontroller_ = nullptr;
  }
  if (from._internal_has_msgnotifystatususer()) {
    msgnotifystatususer_ = new ::contract_in::ContractIn_NotifyStatusUser(*from.msgnotifystatususer_);
  } else {
    msgnotifystatususer_ = nullptr;
  }
  if (from._internal_has_msgnotifystatusrelay()) {
    msgnotifystatusrelay_ = new ::contract_in::ContractIn_NotifyStatusRelay(*from.msgnotifystatusrelay_);
  } else {
    msgnotifystatusrelay_ = nullptr;
  }
  if (from._internal_has_msgunregister()) {
    msgunregister_ = new ::contract_in::ContractIn_Unregister(*from.msgunregister_);
  } else {
    msgunregister_ = nullptr;
  }
  if (from._internal_has_msgregister()) {
    msgregister_ = new ::contract_in::ContractIn_Register(*from.msgregister_);
  } else {
    msgregister_ = nullptr;
  }
  if (from._internal_has_msgtelemetry()) {
    msgtelemetry_ = new ::contract_in::ContractIn_Telemetry(*from.msgtelemetry_);
  } else {
    msgtelemetry_ = nullptr;
  }
  ::memcpy(&userid_, &from.userid_,
    static_cast<size_t>(reinterpret_cast<char*>(&contractinpacket_) -
    reinterpret_cast<char*>(&userid_)) + sizeof(contractinpacket_));
  // @@protoc_insertion_point(copy_constructor:contract_in.ContractIn)
}

void ContractIn::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ContractIn_contract_5fin_2eproto.base);
  time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&msgnotifystatuscontroller_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&relayid_) -
      reinterpret_cast<char*>(&msgnotifystatuscontroller_)) + sizeof(relayid_));
  contractinpacket_ = 1;
}

ContractIn::~ContractIn() {
  // @@protoc_insertion_point(destructor:contract_in.ContractIn)
  SharedDtor();
}

void ContractIn::SharedDtor() {
  time_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete msgnotifystatuscontroller_;
  if (this != internal_default_instance()) delete msgnotifystatususer_;
  if (this != internal_default_instance()) delete msgnotifystatusrelay_;
  if (this != internal_default_instance()) delete msgunregister_;
  if (this != internal_default_instance()) delete msgregister_;
  if (this != internal_default_instance()) delete msgtelemetry_;
}

void ContractIn::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ContractIn& ContractIn::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ContractIn_contract_5fin_2eproto.base);
  return *internal_default_instance();
}


void ContractIn::Clear() {
// @@protoc_insertion_point(message_clear_start:contract_in.ContractIn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      time_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(msgnotifystatuscontroller_ != nullptr);
      msgnotifystatuscontroller_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(msgnotifystatususer_ != nullptr);
      msgnotifystatususer_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(msgnotifystatusrelay_ != nullptr);
      msgnotifystatusrelay_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(msgunregister_ != nullptr);
      msgunregister_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(msgregister_ != nullptr);
      msgregister_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(msgtelemetry_ != nullptr);
      msgtelemetry_->Clear();
    }
  }
  userid_ = 0;
  if (cached_has_bits & 0x00000300u) {
    relayid_ = 0;
    contractinpacket_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

const char* ContractIn::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // optional string time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8Verify(_internal_mutable_time(), ptr, ctx, "contract_in.ContractIn.time");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 userId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_userid(&has_bits);
          userid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 relayId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_relayid(&has_bits);
          relayid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .contract_in.ContractIn.ContractInPacket contractInPacket = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::contract_in::ContractIn_ContractInPacket_IsValid(val))) {
            _internal_set_contractinpacket(static_cast<::contract_in::ContractIn_ContractInPacket>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .contract_in.ContractIn.NotifyStatusController msgNotifyStatusController = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_msgnotifystatuscontroller(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .contract_in.ContractIn.NotifyStatusUser msgNotifyStatusUser = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_msgnotifystatususer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .contract_in.ContractIn.NotifyStatusRelay msgNotifyStatusRelay = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_msgnotifystatusrelay(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .contract_in.ContractIn.Unregister msgUnregister = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_msgunregister(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .contract_in.ContractIn.Register msgRegister = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_msgregister(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .contract_in.ContractIn.Telemetry msgTelemetry = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_msgtelemetry(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContractIn::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:contract_in.ContractIn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string time = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_time().data(), static_cast<int>(this->_internal_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "contract_in.ContractIn.time");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_time(), target);
  }

  // optional int32 userId = 2;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_userid(), target);
  }

  // optional int32 relayId = 3;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_relayid(), target);
  }

  // required .contract_in.ContractIn.ContractInPacket contractInPacket = 4;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_contractinpacket(), target);
  }

  // optional .contract_in.ContractIn.NotifyStatusController msgNotifyStatusController = 5;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, _Internal::msgnotifystatuscontroller(this), target, stream);
  }

  // optional .contract_in.ContractIn.NotifyStatusUser msgNotifyStatusUser = 6;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, _Internal::msgnotifystatususer(this), target, stream);
  }

  // optional .contract_in.ContractIn.NotifyStatusRelay msgNotifyStatusRelay = 7;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, _Internal::msgnotifystatusrelay(this), target, stream);
  }

  // optional .contract_in.ContractIn.Unregister msgUnregister = 8;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, _Internal::msgunregister(this), target, stream);
  }

  // optional .contract_in.ContractIn.Register msgRegister = 9;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, _Internal::msgregister(this), target, stream);
  }

  // optional .contract_in.ContractIn.Telemetry msgTelemetry = 10;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, _Internal::msgtelemetry(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:contract_in.ContractIn)
  return target;
}

size_t ContractIn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:contract_in.ContractIn)
  size_t total_size = 0;

  // required .contract_in.ContractIn.ContractInPacket contractInPacket = 4;
  if (has_contractinpacket()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_contractinpacket());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string time = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_time());
    }

    // optional .contract_in.ContractIn.NotifyStatusController msgNotifyStatusController = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msgnotifystatuscontroller_);
    }

    // optional .contract_in.ContractIn.NotifyStatusUser msgNotifyStatusUser = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msgnotifystatususer_);
    }

    // optional .contract_in.ContractIn.NotifyStatusRelay msgNotifyStatusRelay = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msgnotifystatusrelay_);
    }

    // optional .contract_in.ContractIn.Unregister msgUnregister = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msgunregister_);
    }

    // optional .contract_in.ContractIn.Register msgRegister = 9;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msgregister_);
    }

    // optional .contract_in.ContractIn.Telemetry msgTelemetry = 10;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *msgtelemetry_);
    }

    // optional int32 userId = 2;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_userid());
    }

  }
  // optional int32 relayId = 3;
  if (cached_has_bits & 0x00000100u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_relayid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContractIn::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:contract_in.ContractIn)
  GOOGLE_DCHECK_NE(&from, this);
  const ContractIn* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ContractIn>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:contract_in.ContractIn)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:contract_in.ContractIn)
    MergeFrom(*source);
  }
}

void ContractIn::MergeFrom(const ContractIn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:contract_in.ContractIn)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _has_bits_[0] |= 0x00000001u;
      time_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.time_);
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_msgnotifystatuscontroller()->::contract_in::ContractIn_NotifyStatusController::MergeFrom(from._internal_msgnotifystatuscontroller());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_msgnotifystatususer()->::contract_in::ContractIn_NotifyStatusUser::MergeFrom(from._internal_msgnotifystatususer());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_msgnotifystatusrelay()->::contract_in::ContractIn_NotifyStatusRelay::MergeFrom(from._internal_msgnotifystatusrelay());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_msgunregister()->::contract_in::ContractIn_Unregister::MergeFrom(from._internal_msgunregister());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_msgregister()->::contract_in::ContractIn_Register::MergeFrom(from._internal_msgregister());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_msgtelemetry()->::contract_in::ContractIn_Telemetry::MergeFrom(from._internal_msgtelemetry());
    }
    if (cached_has_bits & 0x00000080u) {
      userid_ = from.userid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      relayid_ = from.relayid_;
    }
    if (cached_has_bits & 0x00000200u) {
      contractinpacket_ = from.contractinpacket_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ContractIn::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:contract_in.ContractIn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContractIn::CopyFrom(const ContractIn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:contract_in.ContractIn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContractIn::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000200) != 0x00000200) return false;
  return true;
}

void ContractIn::InternalSwap(ContractIn* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  time_.Swap(&other->time_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(msgnotifystatuscontroller_, other->msgnotifystatuscontroller_);
  swap(msgnotifystatususer_, other->msgnotifystatususer_);
  swap(msgnotifystatusrelay_, other->msgnotifystatusrelay_);
  swap(msgunregister_, other->msgunregister_);
  swap(msgregister_, other->msgregister_);
  swap(msgtelemetry_, other->msgtelemetry_);
  swap(userid_, other->userid_);
  swap(relayid_, other->relayid_);
  swap(contractinpacket_, other->contractinpacket_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ContractIn::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace contract_in
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::contract_in::ContractIn_Load* Arena::CreateMaybeMessage< ::contract_in::ContractIn_Load >(Arena* arena) {
  return Arena::CreateInternal< ::contract_in::ContractIn_Load >(arena);
}
template<> PROTOBUF_NOINLINE ::contract_in::ContractIn_Location* Arena::CreateMaybeMessage< ::contract_in::ContractIn_Location >(Arena* arena) {
  return Arena::CreateInternal< ::contract_in::ContractIn_Location >(arena);
}
template<> PROTOBUF_NOINLINE ::contract_in::ContractIn_Status* Arena::CreateMaybeMessage< ::contract_in::ContractIn_Status >(Arena* arena) {
  return Arena::CreateInternal< ::contract_in::ContractIn_Status >(arena);
}
template<> PROTOBUF_NOINLINE ::contract_in::ContractIn_NotifyStatusController* Arena::CreateMaybeMessage< ::contract_in::ContractIn_NotifyStatusController >(Arena* arena) {
  return Arena::CreateInternal< ::contract_in::ContractIn_NotifyStatusController >(arena);
}
template<> PROTOBUF_NOINLINE ::contract_in::ContractIn_NotifyStatusUser* Arena::CreateMaybeMessage< ::contract_in::ContractIn_NotifyStatusUser >(Arena* arena) {
  return Arena::CreateInternal< ::contract_in::ContractIn_NotifyStatusUser >(arena);
}
template<> PROTOBUF_NOINLINE ::contract_in::ContractIn_NotifyStatusRelay* Arena::CreateMaybeMessage< ::contract_in::ContractIn_NotifyStatusRelay >(Arena* arena) {
  return Arena::CreateInternal< ::contract_in::ContractIn_NotifyStatusRelay >(arena);
}
template<> PROTOBUF_NOINLINE ::contract_in::ContractIn_Unregister* Arena::CreateMaybeMessage< ::contract_in::ContractIn_Unregister >(Arena* arena) {
  return Arena::CreateInternal< ::contract_in::ContractIn_Unregister >(arena);
}
template<> PROTOBUF_NOINLINE ::contract_in::ContractIn_Register* Arena::CreateMaybeMessage< ::contract_in::ContractIn_Register >(Arena* arena) {
  return Arena::CreateInternal< ::contract_in::ContractIn_Register >(arena);
}
template<> PROTOBUF_NOINLINE ::contract_in::ContractIn_TelemetryByHop* Arena::CreateMaybeMessage< ::contract_in::ContractIn_TelemetryByHop >(Arena* arena) {
  return Arena::CreateInternal< ::contract_in::ContractIn_TelemetryByHop >(arena);
}
template<> PROTOBUF_NOINLINE ::contract_in::ContractIn_Telemetry* Arena::CreateMaybeMessage< ::contract_in::ContractIn_Telemetry >(Arena* arena) {
  return Arena::CreateInternal< ::contract_in::ContractIn_Telemetry >(arena);
}
template<> PROTOBUF_NOINLINE ::contract_in::ContractIn* Arena::CreateMaybeMessage< ::contract_in::ContractIn >(Arena* arena) {
  return Arena::CreateInternal< ::contract_in::ContractIn >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
